
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOGICAL_ORleftLOGICAL_ANDleftORleftXORleftANDleftEQUALSNOT_ASSIGNleftLESSERGREATERLESS_EQUALSMORE_EQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftSTARDIVIDEMODAND AND_ASSIGN AND_XOR_ASSIGN ASSIGN BREAK CASE COLON COMMA COMMENT CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE SEMICOLON STAR STAR_ASSIGN STRING STRUCT SWITCH TYPE VAR XOR XOR_ASSIGNstart : SourceFile\n    empty : \n    SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDeclRep : empty\n                    | ImportDecl SEMICOLON ImportDeclRep ImportDecl : IMPORT STRING\n                  | IMPORT LPAREN STRING RPAREN TopLevelDeclRep : TopLevelDecl SEMICOLON TopLevelDeclRep \n                        | empty\n    TopLevelDecl : Declaration\n                 | FunctionDecl\n    \n    Declaration : ConstDecl\n                | VarDecl\n    \n    ConstDecl : CONST ConstSpec\n    \n    ConstSpec : IdentifierList\n              | IdentifierList ASSIGN ExpressionList\n              | IdentifierList Type ASSIGN ExpressionList\n    \n    VarDecl : VAR IdentifierList Type ASSIGN ExpressionList \n            | VAR IdentifierList Type\n            | VAR IdentifierList ASSIGN ExpressionList\n    \n    Type : TypeName\n         | TypeLit\n         | LPAREN Type RPAREN\n    \n    TypeName : IDENTIFIER\n    \n    TypeLit : ArrayType\n            | StructType\n            | PointerType\n            | FunctionType\n    \n    ArrayType : LSQUARE ArrayLength RSQUARE ElementType\n    \n    ArrayLength :  INTEGER\n    \n    ElementType : Type\n    \n    StructType : STRUCT LCURL FieldDeclSemiColonRep RCURL\n    \n    FieldDeclSemiColonRep : FieldDecl SEMICOLON FieldDeclSemiColonRep\n                          | empty\n    \n    FieldDecl : IdentifierList Type\n    \n    PointerType : STAR BaseType\n    \n    BaseType : Type\n    \n    FunctionType : FUNC Signature\n    \n    Signature : Parameters Result\n              |  Parameters \n    \n    Result : LPAREN TypeList RPAREN\n    \n    Parameters : LPAREN ParamCommaOpt RPAREN\n    \n    ParamCommaOpt : ParameterList\n                 | empty\n    \n    ParameterList : IdentifierList Type CommaParamDeclRep\n    \n    CommaParamDeclRep : COMMA  IdentifierList Type  CommaParamDeclRep\n                      | empty\n    \n    CreateNewScope : empty\n    \n    DelScope : empty\n    \n    Block : LCURL CreateNewScope StatementList DelScope RCURL    \n    \n    StatementList : StSemiColonRep\n    \n    StSemiColonRep : Statement SEMICOLON StSemiColonRep\n                   | empty\n    \n    IdentifierList : IDENTIFIER CommaIdentRep\n    \n    CommaIdentRep : COMMA IDENTIFIER CommaIdentRep \n                   | SEMICOLON\n    \n    ExpressionList : Expression CommaExpRep\n    \n    CommaExpRep : COMMA Expression CommaExpRep\n                | empty\n    \n    FunctionDecl : FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope\n    \n    FunBodyOpt : FunctionBody\n               | empty\n    \n    FunctionName : IDENTIFIER \n    \n    FunctionBody : Block\n    \n    Operand : Literal\n            | OperandName\n            | LPAREN Expression RPAREN\n    \n    Literal : BasicLit\n    \n    BasicLit : Int INTEGER\n             | Str STRING\n    \n    Int : empty \n    Str : empty \n    OperandName : IDENTIFIER\n    PrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | PrimaryExpr LSQUARE Expression RSQUARE\n                   | PrimaryExpr ArgumentsSelector : DOT IDENTIFIERArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n                             | emptyExpression : UnaryExpr\n                  | Expression LOGICAL_OR Expression\n                  | Expression LOGICAL_AND Expression\n                  | Expression EQUALS Expression\n                  | Expression NOT_ASSIGN Expression\n                  | Expression LESSER Expression\n                  | Expression GREATER Expression\n                  | Expression LESS_EQUALS Expression\n                  | Expression MORE_EQUALS Expression\n                  | Expression OR Expression\n                  | Expression XOR Expression\n                  | Expression DIVIDE Expression\n                  | Expression MOD Expression\n                  | Expression LSHIFT Expression\n                  | Expression RSHIFT Expression\n                  | Expression PLUS Expression\n                  | Expression MINUS Expression\n                  | Expression STAR Expression\n                  | Expression AND Expression\n    UnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprUnaryOp : PLUS\n               | MINUS\n               | STAR\n               | AND Statement : Declaration\n                 | SimpleStmt\n                 | ReturnStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | Block\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt SimpleStmt : empty SEMICOLON\n                  | ExpressionStmt SEMICOLON\n                  | IncDecStmt SEMICOLON\n                  | Assignment SEMICOLON\n     ExpressionStmt : Expression\n    IncDecStmt : IDENTIFIER INCR\n               | IDENTIFIER DECR\n     Assignment : ExpressionList AssignOp ExpressionList\n                     AssignOp : PLUS_ASSIGN\n               | MINUS_ASSIGN\n               | STAR_ASSIGN\n               | DIVIDE_ASSIGN\n               | MOD_ASSIGN\n               | AND_ASSIGN\n               | OR_ASSIGN\n               | XOR_ASSIGN\n               | LSHIFT_ASSIGN\n               | RSHIFT_ASSIGN\n               | ASSIGN  IfStmt : IF  Expression Block ElseOpt  ElseOpt : ELSE IfStmt\n              | ELSE Block\n              | emptySwitchStmt : CreateNewScope ExprSwitchStmt DelScope\n                    ExprSwitchStmt : SWITCH Expression LCURL ExprCaseClauseRep RCURL ExprCaseClauseRep : ExprCaseClause ExprCaseClauseRep \n                            | empty ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE BasicLit\n                        | DEFAULT  TypeList : Type TypeRep TypeRep : COMMA Type TypeRep \n                | emptyForStmt : CreateNewScope FOR ForClause Block DelScopeForClause : SimpleStmt ConditionOpt SEMICOLON SimpleStmtConditionOpt : empty\n            | Condition Condition : Expression ReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n                | emptyBreakStmt : BREAK ContinueStmt : CONTINUE '
    
_lr_action_items = {'FUNC':([5,10,11,12,25,28,30,33,36,37,50,51,90,94,129,132,134,179,214,],[-2,21,-6,-2,-7,35,21,35,35,35,-58,-56,35,35,35,35,-57,35,35,]),'DIVIDE':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,114,-75,-103,-104,-72,-105,114,-71,-77,-79,-69,-101,114,114,114,114,114,114,114,114,114,114,-95,114,114,114,114,114,114,-96,114,-80,-81,-78,-75,114,114,114,114,]),'CONST':([5,10,11,12,25,30,54,139,177,219,276,],[-2,15,-6,-2,-7,15,-50,-2,15,15,15,]),'LPAREN':([9,28,31,32,33,35,36,37,43,50,51,53,54,56,57,63,64,65,66,67,68,70,71,74,76,77,79,80,82,88,90,94,99,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,127,129,132,134,139,143,145,169,177,179,186,187,189,201,208,214,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,245,263,276,],[14,37,-2,-65,37,58,37,37,77,-58,-56,58,-50,77,90,77,77,-67,-108,-107,-68,-70,-106,77,-76,77,-109,-75,124,77,37,37,-72,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-71,77,-77,-79,77,37,37,-57,-2,-44,-69,-80,77,37,-81,-78,77,-75,77,37,-120,77,77,77,-122,-121,-119,77,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,77,77,77,]),'STAR_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,231,-2,]),'MINUS_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,232,-2,]),'OR_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,234,-2,]),'LSHIFT_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,236,-2,]),'COLON':([99,123,267,268,274,],[-72,-71,276,-148,-147,]),'LOGICAL_AND':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,103,-75,-103,-104,-72,-105,103,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,103,-88,-94,-95,-87,-102,-90,-89,103,-93,-96,103,-80,-81,-78,-75,103,103,103,103,]),'IMPORT':([5,12,],[9,9,]),'LSHIFT':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,104,-75,-103,-104,-72,-105,104,-71,-77,-79,-69,-101,104,-97,-98,-100,104,104,-99,104,104,104,-95,104,104,104,104,104,104,-96,104,-80,-81,-78,-75,104,104,104,104,]),'GREATER':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,118,-75,-103,-104,-72,-105,118,-71,-77,-79,-69,-101,118,-97,-98,-100,-92,-91,-99,118,118,118,-95,118,118,-90,-89,118,118,-96,118,-80,-81,-78,-75,118,118,118,118,]),'STAR':([28,33,36,37,43,50,51,54,56,63,64,65,66,67,68,70,71,73,74,76,77,78,79,80,82,88,90,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,127,129,132,134,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,177,179,186,187,189,201,206,208,214,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,241,245,248,256,263,276,],[36,36,36,36,66,-58,-56,-50,66,66,66,-67,-108,-107,-68,-70,-106,-84,66,-76,66,102,-109,-75,-103,66,36,36,-104,-72,-105,102,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-71,66,-77,-79,66,36,36,-57,-2,-69,-101,102,102,102,102,102,102,102,102,102,102,-95,102,102,102,102,102,102,-96,102,-80,66,36,-81,-78,66,-75,102,66,36,-120,66,66,66,-122,-121,-119,66,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,102,66,102,102,66,66,]),'MINUS':([43,54,56,63,64,65,66,67,68,70,71,73,74,76,77,78,79,80,82,88,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,127,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,177,186,187,189,201,206,208,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,241,245,248,256,263,276,],[67,-50,67,67,67,-67,-108,-107,-68,-70,-106,-84,67,-76,67,106,-109,-75,-103,67,-104,-72,-105,106,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-71,67,-77,-79,67,-2,-69,-101,106,106,106,-100,106,106,-99,106,106,106,-95,106,106,106,106,106,106,-96,106,-80,67,-81,-78,67,-75,106,67,-120,67,67,67,-122,-121,-119,67,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,106,67,106,106,67,67,]),'DOT':([65,68,70,76,80,82,99,123,125,126,145,169,186,187,201,],[-67,-68,-70,-76,-75,128,-72,-71,-77,-79,-69,-80,-81,-78,-75,]),'LCURL':([46,54,57,65,68,70,73,76,80,82,87,91,98,99,100,123,125,126,139,143,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,162,163,164,169,177,178,186,187,218,219,223,224,227,241,247,248,260,273,276,],[85,-50,-42,-67,-68,-70,-84,-76,-75,-103,139,-41,-104,-72,-105,-71,-77,-79,-2,-44,-69,-101,-86,-97,-98,-100,-92,-91,-99,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,139,-43,-81,-78,-120,139,-122,-121,-119,139,139,259,139,-153,139,]),'RSQUARE':([65,68,70,73,76,80,82,83,84,98,99,100,123,125,126,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,162,163,164,168,169,186,187,],[-67,-68,-70,-84,-76,-75,-103,-32,129,-104,-72,-105,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,187,-80,-81,-78,]),'LESSER':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,119,-75,-103,-104,-72,-105,119,-71,-77,-79,-69,-101,119,-97,-98,-100,-92,-91,-99,119,119,119,-95,119,119,-90,-89,119,119,-96,119,-80,-81,-78,-75,119,119,119,119,]),'INCR':([201,],[225,]),'RPAREN':([26,38,39,41,42,44,47,48,57,58,59,60,61,62,65,68,70,73,76,78,80,82,91,92,93,95,96,98,99,100,101,112,115,123,124,125,126,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,170,171,173,178,180,181,182,184,185,186,187,213,242,243,253,],[34,-27,-24,-23,-26,-28,-29,-30,-42,-2,-40,-39,-38,96,-67,-68,-70,-84,-76,-2,-75,-103,-41,143,-45,-46,-25,-104,-72,-105,145,-61,-59,-71,-2,-77,-79,178,-2,-44,-2,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-83,-82,186,-80,-33,-31,-34,-43,-151,-149,-47,-49,-60,-81,-78,-2,-150,-2,-48,]),'SEMICOLON':([1,6,7,8,13,16,17,18,23,24,27,28,29,34,38,39,41,42,44,47,48,50,51,54,55,57,59,60,61,65,68,70,73,75,76,78,80,82,86,87,89,91,96,97,98,99,100,112,115,123,125,126,130,134,135,136,137,138,139,140,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,170,171,173,174,175,176,177,178,185,186,187,189,190,191,192,193,194,195,197,198,199,200,201,202,206,207,209,210,211,212,215,216,217,218,219,220,222,223,224,225,226,227,245,246,249,250,251,252,254,255,256,257,258,261,262,263,264,271,272,275,276,],[5,-4,-5,12,-8,-13,30,-12,-15,-14,-16,-17,50,-9,-27,-24,-23,-26,-28,-29,-30,-58,-56,-50,-21,-42,-40,-39,-38,-67,-68,-70,-84,-18,-76,-2,-75,-103,50,-2,-22,-41,-25,-19,-104,-72,-105,-61,-59,-71,-77,-79,172,-57,-63,-2,-66,-64,-2,-20,-44,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-33,-31,-34,-37,-62,-51,-2,-43,-60,-81,-78,-2,-117,-114,-111,218,-118,219,-116,223,224,-110,-75,227,-123,-115,-113,-160,-161,-112,-157,-159,-158,-120,-2,-2,-2,-122,-121,-124,-125,-119,-2,227,-142,-52,-126,-2,-155,263,-156,-154,-2,-141,-138,-2,-152,-139,-140,-143,-2,]),'RCURL':([54,85,131,133,139,172,176,177,188,202,203,204,219,228,244,259,266,269,270,276,277,278,],[-50,-2,173,-36,-2,-2,-51,-2,-35,-55,-53,-2,-2,250,-54,-2,275,-2,-145,-2,-144,-146,]),'LESS_EQUALS':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,108,-75,-103,-104,-72,-105,108,-71,-77,-79,-69,-101,108,-97,-98,-100,-92,-91,-99,108,108,108,-95,108,108,-90,-89,108,108,-96,108,-80,-81,-78,-75,108,108,108,108,]),'DEFAULT':([202,203,219,244,259,269,276,278,],[-55,-53,-2,-54,268,268,-2,-146,]),'SWITCH':([54,139,177,196,202,219,276,],[-50,-2,-2,221,-50,-2,-2,]),'AND_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,237,-2,]),'PLUS':([43,54,56,63,64,65,66,67,68,70,71,73,74,76,77,78,79,80,82,88,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,127,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,177,186,187,189,201,206,208,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,241,245,248,256,263,276,],[71,-50,71,71,71,-67,-108,-107,-68,-70,-106,-84,71,-76,71,109,-109,-75,-103,71,-104,-72,-105,109,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-71,71,-77,-79,71,-2,-69,-101,109,109,109,-100,109,109,-99,109,109,109,-95,109,109,109,109,109,109,-96,109,-80,71,-81,-78,71,-75,109,71,-120,71,71,71,-122,-121,-119,71,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,109,71,109,109,71,71,]),'DECR':([201,],[226,]),'COMMA':([29,38,39,41,42,44,47,48,57,59,60,61,65,68,70,73,76,78,80,82,86,91,96,98,99,100,123,125,126,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,170,171,173,178,186,187,201,206,213,243,],[49,-27,-24,-23,-26,-28,-29,-30,-42,-40,-39,-38,-67,-68,-70,-84,-76,110,-75,-103,49,-41,-25,-104,-72,-105,-71,-77,-79,179,-44,183,-69,-101,-86,-97,-98,-100,-92,-91,-99,110,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-33,-31,-34,-43,-81,-78,-75,110,179,183,]),'IDENTIFIER':([2,15,21,22,28,33,36,37,43,49,50,51,54,56,58,63,64,66,67,71,74,77,79,85,88,90,94,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,128,129,132,134,139,172,177,179,183,189,208,214,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,245,263,276,],[7,29,32,29,42,42,42,42,80,86,-58,-56,-50,80,29,80,80,-108,-107,-106,80,80,-109,29,80,42,42,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,169,42,42,-57,-2,29,201,42,29,80,80,42,-120,201,201,80,-122,-121,-119,80,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,80,201,201,]),'ASSIGN':([28,33,38,39,40,41,42,44,47,48,50,51,55,57,59,60,61,65,68,70,73,76,80,82,91,96,98,99,100,112,115,123,125,126,134,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,170,171,173,178,185,186,187,201,205,206,],[43,56,-27,-24,63,-23,-26,-28,-29,-30,-58,-56,88,-42,-40,-39,-38,-67,-68,-70,-84,-76,-75,-103,-41,-25,-104,-72,-105,-61,-59,-71,-77,-79,-57,-44,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-33,-31,-34,-43,-60,-81,-78,-75,240,-2,]),'$end':([3,4,5,10,11,12,19,20,25,30,52,],[-1,0,-2,-2,-6,-2,-11,-3,-7,-2,-10,]),'CASE':([202,203,219,244,259,269,276,278,],[-55,-53,-2,-54,265,265,-2,-146,]),'XOR':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,113,-75,-103,-104,-72,-105,113,-71,-77,-79,-69,-101,113,-97,-98,-100,-92,-91,-99,113,-88,-94,-95,-87,-102,-90,-89,113,113,-96,113,-80,-81,-78,-75,113,113,113,113,]),'STRING':([9,14,43,54,56,63,64,66,67,69,71,72,74,77,79,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,139,165,177,189,202,208,216,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,245,246,257,263,265,276,],[13,26,-2,-50,-2,-2,-2,-108,-107,99,-106,-74,-2,-2,-109,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-74,-2,-2,-74,-2,-74,-120,-2,-2,-2,-122,-121,-119,-2,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,-2,-74,-74,-2,-2,-2,]),'FOR':([54,139,177,196,202,219,276,],[-50,-2,-2,220,-50,-2,-2,]),'PACKAGE':([0,],[2,]),'EQUALS':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,116,-75,-103,-104,-72,-105,116,-71,-77,-79,-69,-101,116,-97,-98,-100,-92,-91,-99,116,-88,116,-95,-87,116,-90,-89,116,116,-96,116,-80,-81,-78,-75,116,116,116,116,]),'ELSE':([250,252,],[-52,260,]),'DIVIDE_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,238,-2,]),'LSQUARE':([28,33,36,37,50,51,65,68,70,76,80,82,90,94,99,123,125,126,129,132,134,145,169,179,186,187,201,214,],[45,45,45,45,-58,-56,-67,-68,-70,-76,-75,127,45,45,-72,-71,-77,-79,45,45,-57,-69,-80,45,-81,-78,-75,45,]),'INTEGER':([43,45,54,56,63,64,66,67,71,72,74,77,79,81,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,139,165,177,189,202,208,216,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,245,246,257,263,265,276,],[-2,83,-50,-2,-2,-2,-108,-107,-106,-73,-2,-2,-109,123,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-73,-2,-2,-73,-2,-73,-120,-2,-2,-2,-122,-121,-119,-2,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,-2,-73,-73,-2,-2,-2,]),'VAR':([5,10,11,12,25,30,54,139,177,219,276,],[-2,22,-6,-2,-7,22,-50,-2,22,22,22,]),'MOD_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,235,-2,]),'IF':([54,139,177,219,260,276,],[-50,-2,208,208,208,208,]),'AND':([43,54,56,63,64,65,66,67,68,70,71,73,74,76,77,78,79,80,82,88,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,127,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,177,186,187,189,201,206,208,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,241,245,248,256,263,276,],[79,-50,79,79,79,-67,-108,-107,-68,-70,-106,-84,79,-76,79,117,-109,-75,-103,79,-104,-72,-105,117,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-71,79,-77,-79,79,-2,-69,-101,117,-97,-98,-100,-92,-91,-99,117,-88,117,-95,-87,-102,-90,-89,117,117,-96,117,-80,79,-81,-78,79,-75,117,79,-120,79,79,79,-122,-121,-119,79,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,117,79,117,117,79,79,]),'RETURN':([54,139,177,219,276,],[-50,-2,189,189,189,]),'NOT_ASSIGN':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,111,-75,-103,-104,-72,-105,111,-71,-77,-79,-69,-101,111,-97,-98,-100,-92,-91,-99,111,-88,111,-95,-87,111,-90,-89,111,111,-96,111,-80,-81,-78,-75,111,111,111,111,]),'STRUCT':([28,33,36,37,50,51,90,94,129,132,134,179,214,],[46,46,46,46,-58,-56,46,46,46,46,-57,46,46,]),'RSHIFT':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,105,-75,-103,-104,-72,-105,105,-71,-77,-79,-69,-101,105,-97,-98,-100,105,105,-99,105,105,105,-95,105,105,105,105,105,105,-96,105,-80,-81,-78,-75,105,105,105,105,]),'XOR_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,233,-2,]),'RSHIFT_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,230,-2,]),'MORE_EQUALS':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,107,-75,-103,-104,-72,-105,107,-71,-77,-79,-69,-101,107,-97,-98,-100,-92,-91,-99,107,107,107,-95,107,107,-90,-89,107,107,-96,107,-80,-81,-78,-75,107,107,107,107,]),'BREAK':([54,139,177,219,276,],[-50,-2,210,210,210,]),'LOGICAL_OR':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,120,-75,-103,-104,-72,-105,120,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,120,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,120,-80,-81,-78,-75,120,120,120,120,]),'CONTINUE':([54,139,177,219,276,],[-50,-2,211,211,211,]),'PLUS_ASSIGN':([65,68,70,73,76,80,82,98,99,100,112,115,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,169,185,186,187,201,205,206,],[-67,-68,-70,-84,-76,-75,-103,-104,-72,-105,-61,-59,-71,-77,-79,-69,-101,-86,-97,-98,-100,-92,-91,-99,-2,-88,-94,-95,-87,-102,-90,-89,-85,-93,-96,-80,-60,-81,-78,-75,239,-2,]),'NOT':([43,54,56,63,64,66,67,71,74,77,79,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,139,177,189,208,218,219,220,221,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,245,263,276,],[74,-50,74,74,74,-108,-107,-106,74,74,-109,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-2,74,74,74,-120,74,74,74,-122,-121,-119,74,-136,-129,-128,-134,-133,-131,-135,-132,-130,-127,-137,74,74,74,]),'OR':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,121,-75,-103,-104,-72,-105,121,-71,-77,-79,-69,-101,121,-97,-98,-100,-92,-91,-99,121,-88,-94,-95,-87,-102,-90,-89,121,-93,-96,121,-80,-81,-78,-75,121,121,121,121,]),'MOD':([65,68,70,73,76,78,80,82,98,99,100,101,123,125,126,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,186,187,201,206,241,248,256,],[-67,-68,-70,-84,-76,122,-75,-103,-104,-72,-105,122,-71,-77,-79,-69,-101,122,122,122,122,122,122,122,122,122,122,-95,122,122,122,122,122,122,-96,122,-80,-81,-78,-75,122,122,122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([87,],[135,]),'CreateNewScope':([31,139,177,219,276,],[53,177,196,196,196,]),'Assignment':([177,219,220,263,276,],[198,198,198,198,198,]),'Parameters':([35,53,],[57,57,]),'StructType':([28,33,36,37,90,94,129,132,179,214,],[44,44,44,44,44,44,44,44,44,44,]),'ContinueStmt':([177,219,276,],[191,191,191,]),'PackageName':([2,],[6,]),'SourceFile':([0,],[3,]),'IfStmt':([177,219,260,276,],[197,197,271,197,]),'FieldDeclSemiColonRep':([85,172,],[131,188,]),'ArrayType':([28,33,36,37,90,94,129,132,179,214,],[38,38,38,38,38,38,38,38,38,38,]),'FunctionDecl':([10,30,],[16,16,]),'TopLevelDecl':([10,30,],[17,17,]),'Literal':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'ForStmt':([177,219,276,],[194,194,194,]),'Arguments':([82,],[126,]),'Statement':([177,219,276,],[195,195,195,]),'IdentifierList':([15,22,58,85,172,183,],[28,33,94,132,132,214,]),'Operand':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'Selector':([82,],[125,]),'Type':([28,33,36,37,90,94,129,132,179,214,],[40,55,60,62,142,144,170,174,213,243,]),'ImportDecl':([5,12,],[8,8,]),'FunctionName':([21,],[31,]),'OperandName':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'PackageClause':([0,],[1,]),'FieldDecl':([85,172,],[130,130,]),'start':([0,],[4,]),'TypeList':([90,],[141,]),'TypeLit':([28,33,36,37,90,94,129,132,179,214,],[39,39,39,39,39,39,39,39,39,39,]),'ParamCommaOpt':([58,],[92,]),'BaseType':([36,],[61,]),'SwitchStmt':([177,219,276,],[190,190,190,]),'ImportDeclRep':([5,12,],[10,25,]),'TypeName':([28,33,36,37,90,94,129,132,179,214,],[41,41,41,41,41,41,41,41,41,41,]),'IncDecStmt':([177,219,220,263,276,],[199,199,199,199,199,]),'TypeRep':([142,213,],[181,242,]),'Declaration':([10,30,177,219,276,],[18,18,200,200,200,]),'ExprCaseClause':([259,269,],[269,269,]),'AssignOp':([205,],[229,]),'UnaryOp':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'empty':([5,10,12,30,31,43,56,58,63,64,74,77,78,85,87,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,136,139,142,144,154,172,177,189,204,206,208,213,219,220,221,222,229,243,245,252,258,259,263,265,269,276,],[11,19,11,19,54,72,72,95,72,72,72,72,112,133,138,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,165,72,176,54,180,184,112,133,202,216,176,112,72,180,202,246,72,176,72,184,257,261,176,270,246,72,270,202,]),'TopLevelDeclRep':([10,30,],[20,52,]),'Condition':([245,],[254,]),'ConstSpec':([15,],[27,]),'CommaIdentRep':([29,86,],[51,134,]),'CommaParamDeclRep':([144,243,],[182,253,]),'CommaExpRep':([78,154,206,],[115,185,115,]),'UnaryExpr':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[73,73,73,98,100,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'StatementList':([177,276,],[204,278,]),'PrimaryExpr':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'ConditionOpt':([245,],[255,]),'ExpressionList':([43,56,63,88,124,177,189,219,220,229,263,276,],[75,89,97,140,166,205,217,205,205,251,205,205,]),'SimpleStmt':([177,219,220,263,276,],[192,192,245,273,192,]),'Str':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,265,276,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'Signature':([35,53,],[59,87,]),'ForClause':([220,],[247,]),'ElementType':([129,],[171,]),'Expression':([43,56,63,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,276,],[78,78,78,101,78,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,78,168,206,78,241,206,206,248,78,256,206,206,]),'Block':([87,177,219,241,247,260,276,],[137,207,207,252,258,272,207,]),'ParameterList':([58,],[93,]),'ExprCaseClauseRep':([259,269,],[266,277,]),'FunBodyOpt':([87,],[136,]),'DelScope':([136,204,222,258,],[175,228,249,264,]),'Int':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,265,276,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'FunctionType':([28,33,36,37,90,94,129,132,179,214,],[48,48,48,48,48,48,48,48,48,48,]),'BreakStmt':([177,219,276,],[209,209,209,]),'ExprSwitchCase':([259,269,],[267,267,]),'VarDecl':([10,30,177,219,276,],[23,23,23,23,23,]),'ExpressionStmt':([177,219,220,263,276,],[193,193,193,193,193,]),'ElseOpt':([252,],[262,]),'StSemiColonRep':([177,219,276,],[203,244,203,]),'Result':([57,],[91,]),'BasicLit':([43,56,63,64,74,77,88,102,103,104,105,106,107,108,109,110,111,113,114,116,117,118,119,120,121,122,124,127,177,189,208,219,220,221,229,245,263,265,276,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,274,70,]),'PointerType':([28,33,36,37,90,94,129,132,179,214,],[47,47,47,47,47,47,47,47,47,47,]),'ArrayLength':([45,],[84,]),'ReturnStmt':([177,219,276,],[212,212,212,]),'ConstDecl':([10,30,177,219,276,],[24,24,24,24,24,]),'ExpressionListTypeOpt':([124,],[167,]),'ExpressionListPureOpt':([189,],[215,]),'ExprSwitchStmt':([196,],[222,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',62),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',69),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',74),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',107),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',112),
  ('ImportDeclRep -> empty','ImportDeclRep',1,'p_import_decl_rep','parser.py',117),
  ('ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep','ImportDeclRep',3,'p_import_decl_rep','parser.py',118),
  ('ImportDecl -> IMPORT STRING','ImportDecl',2,'p_import_decl','parser.py',128),
  ('ImportDecl -> IMPORT LPAREN STRING RPAREN','ImportDecl',4,'p_import_decl','parser.py',129),
  ('TopLevelDeclRep -> TopLevelDecl SEMICOLON TopLevelDeclRep','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',137),
  ('TopLevelDeclRep -> empty','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',138),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_top_level_decl','parser.py',147),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_top_level_decl','parser.py',148),
  ('Declaration -> ConstDecl','Declaration',1,'p_declaration','parser.py',155),
  ('Declaration -> VarDecl','Declaration',1,'p_declaration','parser.py',156),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',163),
  ('ConstSpec -> IdentifierList','ConstSpec',1,'p_const_spec','parser.py',169),
  ('ConstSpec -> IdentifierList ASSIGN ExpressionList','ConstSpec',3,'p_const_spec','parser.py',170),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_const_spec','parser.py',171),
  ('VarDecl -> VAR IdentifierList Type ASSIGN ExpressionList','VarDecl',5,'p_var_decl','parser.py',209),
  ('VarDecl -> VAR IdentifierList Type','VarDecl',3,'p_var_decl','parser.py',210),
  ('VarDecl -> VAR IdentifierList ASSIGN ExpressionList','VarDecl',4,'p_var_decl','parser.py',211),
  ('Type -> TypeName','Type',1,'p_type','parser.py',246),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',247),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',248),
  ('TypeName -> IDENTIFIER','TypeName',1,'p_type_name','parser.py',259),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',271),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',272),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',273),
  ('TypeLit -> FunctionType','TypeLit',1,'p_type_lit','parser.py',274),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',281),
  ('ArrayLength -> INTEGER','ArrayLength',1,'p_array_length','parser.py',290),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',300),
  ('StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL','StructType',4,'p_struct_types','parser.py',310),
  ('FieldDeclSemiColonRep -> FieldDecl SEMICOLON FieldDeclSemiColonRep','FieldDeclSemiColonRep',3,'p_field_decl_semicolon_rep','parser.py',320),
  ('FieldDeclSemiColonRep -> empty','FieldDeclSemiColonRep',1,'p_field_decl_semicolon_rep','parser.py',321),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',332),
  ('PointerType -> STAR BaseType','PointerType',2,'p_pointer_type','parser.py',343),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',351),
  ('FunctionType -> FUNC Signature','FunctionType',2,'p_function_type','parser.py',358),
  ('Signature -> Parameters Result','Signature',2,'p_signature','parser.py',369),
  ('Signature -> Parameters','Signature',1,'p_signature','parser.py',370),
  ('Result -> LPAREN TypeList RPAREN','Result',3,'p_result','parser.py',381),
  ('Parameters -> LPAREN ParamCommaOpt RPAREN','Parameters',3,'p_parameters','parser.py',388),
  ('ParamCommaOpt -> ParameterList','ParamCommaOpt',1,'p_param_comma_opt','parser.py',395),
  ('ParamCommaOpt -> empty','ParamCommaOpt',1,'p_param_comma_opt','parser.py',396),
  ('ParameterList -> IdentifierList Type CommaParamDeclRep','ParameterList',3,'p_parameter_list','parser.py',405),
  ('CommaParamDeclRep -> COMMA IdentifierList Type CommaParamDeclRep','CommaParamDeclRep',4,'p_comma_param_decl_rep','parser.py',415),
  ('CommaParamDeclRep -> empty','CommaParamDeclRep',1,'p_comma_param_decl_rep','parser.py',416),
  ('CreateNewScope -> empty','CreateNewScope',1,'p_create_new_scope','parser.py',432),
  ('DelScope -> empty','DelScope',1,'p_del_scope','parser.py',438),
  ('Block -> LCURL CreateNewScope StatementList DelScope RCURL','Block',5,'p_block','parser.py',470),
  ('StatementList -> StSemiColonRep','StatementList',1,'p_statement_list','parser.py',476),
  ('StSemiColonRep -> Statement SEMICOLON StSemiColonRep','StSemiColonRep',3,'p_st_semicolon_rep','parser.py',482),
  ('StSemiColonRep -> empty','StSemiColonRep',1,'p_st_semicolon_rep','parser.py',483),
  ('IdentifierList -> IDENTIFIER CommaIdentRep','IdentifierList',2,'p_identifier_list','parser.py',502),
  ('CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep','CommaIdentRep',3,'p_comma_ident_rep','parser.py',513),
  ('CommaIdentRep -> SEMICOLON','CommaIdentRep',1,'p_comma_ident_rep','parser.py',514),
  ('ExpressionList -> Expression CommaExpRep','ExpressionList',2,'p_expression_list','parser.py',527),
  ('CommaExpRep -> COMMA Expression CommaExpRep','CommaExpRep',3,'p_comma_exp_rep','parser.py',550),
  ('CommaExpRep -> empty','CommaExpRep',1,'p_comma_exp_rep','parser.py',551),
  ('FunctionDecl -> FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope','FunctionDecl',6,'p_function_decl','parser.py',573),
  ('FunBodyOpt -> FunctionBody','FunBodyOpt',1,'p_fun_body_opt','parser.py',608),
  ('FunBodyOpt -> empty','FunBodyOpt',1,'p_fun_body_opt','parser.py',609),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_function_name','parser.py',615),
  ('FunctionBody -> Block','FunctionBody',1,'p_functionbody','parser.py',624),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',645),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',646),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',647),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',656),
  ('BasicLit -> Int INTEGER','BasicLit',2,'p_basic_lit','parser.py',662),
  ('BasicLit -> Str STRING','BasicLit',2,'p_basic_lit','parser.py',663),
  ('Int -> empty','Int',1,'p_int','parser.py',683),
  ('Str -> empty','Str',1,'p_str','parser.py',688),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',693),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',701),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',702),
  ('PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE','PrimaryExpr',4,'p_prim_expr','parser.py',703),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',704),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',772),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',776),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',780),
  ('ExpressionListTypeOpt -> empty','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',781),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',791),
  ('Expression -> Expression LOGICAL_OR Expression','Expression',3,'p_expr','parser.py',792),
  ('Expression -> Expression LOGICAL_AND Expression','Expression',3,'p_expr','parser.py',793),
  ('Expression -> Expression EQUALS Expression','Expression',3,'p_expr','parser.py',794),
  ('Expression -> Expression NOT_ASSIGN Expression','Expression',3,'p_expr','parser.py',795),
  ('Expression -> Expression LESSER Expression','Expression',3,'p_expr','parser.py',796),
  ('Expression -> Expression GREATER Expression','Expression',3,'p_expr','parser.py',797),
  ('Expression -> Expression LESS_EQUALS Expression','Expression',3,'p_expr','parser.py',798),
  ('Expression -> Expression MORE_EQUALS Expression','Expression',3,'p_expr','parser.py',799),
  ('Expression -> Expression OR Expression','Expression',3,'p_expr','parser.py',800),
  ('Expression -> Expression XOR Expression','Expression',3,'p_expr','parser.py',801),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_expr','parser.py',802),
  ('Expression -> Expression MOD Expression','Expression',3,'p_expr','parser.py',803),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_expr','parser.py',804),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_expr','parser.py',805),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_expr','parser.py',806),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_expr','parser.py',807),
  ('Expression -> Expression STAR Expression','Expression',3,'p_expr','parser.py',808),
  ('Expression -> Expression AND Expression','Expression',3,'p_expr','parser.py',809),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',832),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',833),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',834),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',875),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',876),
  ('UnaryOp -> STAR','UnaryOp',1,'p_unary_op','parser.py',877),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',878),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',891),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',892),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',893),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',894),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',895),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',896),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',897),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',898),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',899),
  ('SimpleStmt -> empty SEMICOLON','SimpleStmt',2,'p_simple_stmt','parser.py',905),
  ('SimpleStmt -> ExpressionStmt SEMICOLON','SimpleStmt',2,'p_simple_stmt','parser.py',906),
  ('SimpleStmt -> IncDecStmt SEMICOLON','SimpleStmt',2,'p_simple_stmt','parser.py',907),
  ('SimpleStmt -> Assignment SEMICOLON','SimpleStmt',2,'p_simple_stmt','parser.py',908),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',917),
  ('IncDecStmt -> IDENTIFIER INCR','IncDecStmt',2,'p_inc_dec','parser.py',923),
  ('IncDecStmt -> IDENTIFIER DECR','IncDecStmt',2,'p_inc_dec','parser.py',924),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_assignment','parser.py',937),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',962),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',963),
  ('AssignOp -> STAR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',964),
  ('AssignOp -> DIVIDE_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',965),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',966),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',967),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',968),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',969),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',970),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',971),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',972),
  ('IfStmt -> IF Expression Block ElseOpt','IfStmt',4,'p_if_statement','parser.py',977),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',999),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',1000),
  ('ElseOpt -> empty','ElseOpt',1,'p_else_opt','parser.py',1001),
  ('SwitchStmt -> CreateNewScope ExprSwitchStmt DelScope','SwitchStmt',3,'p_switch_statement','parser.py',1021),
  ('ExprSwitchStmt -> SWITCH Expression LCURL ExprCaseClauseRep RCURL','ExprSwitchStmt',5,'p_expr_switch_stmt','parser.py',1027),
  ('ExprCaseClauseRep -> ExprCaseClause ExprCaseClauseRep','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',1064),
  ('ExprCaseClauseRep -> empty','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',1065),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',1072),
  ('ExprSwitchCase -> CASE BasicLit','ExprSwitchCase',2,'p_expr_switch_case','parser.py',1076),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',1077),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',1085),
  ('TypeRep -> COMMA Type TypeRep','TypeRep',3,'p_type_rep','parser.py',1092),
  ('TypeRep -> empty','TypeRep',1,'p_type_rep','parser.py',1093),
  ('ForStmt -> CreateNewScope FOR ForClause Block DelScope','ForStmt',5,'p_for','parser.py',1103),
  ('ForClause -> SimpleStmt ConditionOpt SEMICOLON SimpleStmt','ForClause',4,'p_forclause','parser.py',1116),
  ('ConditionOpt -> empty','ConditionOpt',1,'p_conditionopt','parser.py',1146),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1147),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1155),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1159),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1170),
  ('ExpressionListPureOpt -> empty','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1171),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_break','parser.py',1177),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_continue','parser.py',1183),
]
