Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RUNE
    AND_XOR_ASSIGN
    QUICK_ASSIGN
    GOTO
    IMAGINARY
    COMMENT
    HEX
    RANGE
    FLOAT
    TYPE

Grammar

Rule 0     S' -> start
Rule 1     start -> SourceFile
Rule 2     empty -> <empty>
Rule 3     SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
Rule 4     PackageClause -> PACKAGE PackageName
Rule 5     PackageName -> IDENTIFIER
Rule 6     ImportDeclRep -> empty
Rule 7     ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep
Rule 8     ImportDecl -> IMPORT STRING
Rule 9     ImportDecl -> IMPORT LPAREN STRING RPAREN
Rule 10    TopLevelDeclRep -> TopLevelDecl SEMICOLON TopLevelDeclRep
Rule 11    TopLevelDeclRep -> empty
Rule 12    TopLevelDecl -> Declaration
Rule 13    TopLevelDecl -> FunctionDecl
Rule 14    Declaration -> ConstDecl
Rule 15    Declaration -> VarDecl
Rule 16    ConstDecl -> CONST ConstSpec
Rule 17    ConstSpec -> IdentifierList
Rule 18    ConstSpec -> IdentifierList ASSIGN ExpressionList
Rule 19    ConstSpec -> IdentifierList Type ASSIGN ExpressionList
Rule 20    VarDecl -> VAR IdentifierList Type ASSIGN ExpressionList
Rule 21    VarDecl -> VAR IdentifierList Type
Rule 22    VarDecl -> VAR IdentifierList ASSIGN ExpressionList
Rule 23    Type -> TypeName
Rule 24    Type -> TypeLit
Rule 25    Type -> LPAREN Type RPAREN
Rule 26    TypeName -> IDENTIFIER
Rule 27    TypeLit -> ArrayType
Rule 28    TypeLit -> StructType
Rule 29    TypeLit -> PointerType
Rule 30    TypeLit -> FunctionType
Rule 31    ArrayType -> LSQUARE ArrayLength RSQUARE ElementType
Rule 32    ArrayLength -> INTEGER
Rule 33    ElementType -> Type
Rule 34    StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL
Rule 35    FieldDeclSemiColonRep -> FieldDecl SEMICOLON FieldDeclSemiColonRep
Rule 36    FieldDeclSemiColonRep -> empty
Rule 37    FieldDecl -> IdentifierList Type
Rule 38    PointerType -> STAR BaseType
Rule 39    BaseType -> Type
Rule 40    FunctionType -> FUNC Signature
Rule 41    Signature -> Parameters Result
Rule 42    Signature -> Parameters
Rule 43    Result -> LPAREN TypeList RPAREN
Rule 44    Parameters -> LPAREN ParamCommaOpt RPAREN
Rule 45    ParamCommaOpt -> ParameterList
Rule 46    ParamCommaOpt -> empty
Rule 47    ParameterList -> IdentifierList Type CommaParamDeclRep
Rule 48    CommaParamDeclRep -> COMMA IdentifierList Type CommaParamDeclRep
Rule 49    CommaParamDeclRep -> empty
Rule 50    CreateNewScope -> empty
Rule 51    DelScope -> empty
Rule 52    Block -> LCURL CreateNewScope StatementList DelScope RCURL
Rule 53    StatementList -> StSemiColonRep
Rule 54    StSemiColonRep -> Statement SEMICOLON StSemiColonRep
Rule 55    StSemiColonRep -> empty
Rule 56    IdentifierList -> IDENTIFIER CommaIdentRep
Rule 57    CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep
Rule 58    CommaIdentRep -> SEMICOLON
Rule 59    ExpressionList -> Expression CommaExpRep
Rule 60    CommaExpRep -> COMMA Expression CommaExpRep
Rule 61    CommaExpRep -> empty
Rule 62    FunctionDecl -> FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope
Rule 63    FunBodyOpt -> FunctionBody
Rule 64    FunBodyOpt -> empty
Rule 65    FunctionName -> IDENTIFIER
Rule 66    FunctionBody -> Block
Rule 67    Operand -> Literal
Rule 68    Operand -> OperandName
Rule 69    Operand -> LPAREN Expression RPAREN
Rule 70    Literal -> BasicLit
Rule 71    BasicLit -> Int INTEGER
Rule 72    BasicLit -> Str STRING
Rule 73    Int -> empty
Rule 74    Str -> empty
Rule 75    OperandName -> IDENTIFIER
Rule 76    PrimaryExpr -> Operand
Rule 77    PrimaryExpr -> PrimaryExpr Selector
Rule 78    PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE
Rule 79    PrimaryExpr -> PrimaryExpr Arguments
Rule 80    Selector -> DOT IDENTIFIER
Rule 81    Arguments -> LPAREN ExpressionListTypeOpt RPAREN
Rule 82    ExpressionListTypeOpt -> ExpressionList
Rule 83    ExpressionListTypeOpt -> empty
Rule 84    Expression -> UnaryExpr
Rule 85    Expression -> Expression LOGICAL_OR Expression
Rule 86    Expression -> Expression LOGICAL_AND Expression
Rule 87    Expression -> Expression EQUALS Expression
Rule 88    Expression -> Expression NOT_ASSIGN Expression
Rule 89    Expression -> Expression LESSER Expression
Rule 90    Expression -> Expression GREATER Expression
Rule 91    Expression -> Expression LESS_EQUALS Expression
Rule 92    Expression -> Expression MORE_EQUALS Expression
Rule 93    Expression -> Expression OR Expression
Rule 94    Expression -> Expression XOR Expression
Rule 95    Expression -> Expression DIVIDE Expression
Rule 96    Expression -> Expression MOD Expression
Rule 97    Expression -> Expression LSHIFT Expression
Rule 98    Expression -> Expression RSHIFT Expression
Rule 99    Expression -> Expression PLUS Expression
Rule 100   Expression -> Expression MINUS Expression
Rule 101   Expression -> Expression STAR Expression
Rule 102   Expression -> Expression AND Expression
Rule 103   UnaryExpr -> PrimaryExpr
Rule 104   UnaryExpr -> UnaryOp UnaryExpr
Rule 105   UnaryExpr -> NOT UnaryExpr
Rule 106   UnaryOp -> PLUS
Rule 107   UnaryOp -> MINUS
Rule 108   UnaryOp -> STAR
Rule 109   UnaryOp -> AND
Rule 110   Statement -> Declaration
Rule 111   Statement -> SimpleStmt
Rule 112   Statement -> ReturnStmt
Rule 113   Statement -> BreakStmt
Rule 114   Statement -> ContinueStmt
Rule 115   Statement -> Block
Rule 116   Statement -> IfStmt
Rule 117   Statement -> SwitchStmt
Rule 118   Statement -> ForStmt
Rule 119   SimpleStmt -> empty SEMICOLON
Rule 120   SimpleStmt -> ExpressionStmt SEMICOLON
Rule 121   SimpleStmt -> IncDecStmt SEMICOLON
Rule 122   SimpleStmt -> Assignment SEMICOLON
Rule 123   ExpressionStmt -> Expression
Rule 124   IncDecStmt -> IDENTIFIER INCR
Rule 125   IncDecStmt -> IDENTIFIER DECR
Rule 126   Assignment -> ExpressionList AssignOp ExpressionList
Rule 127   AssignOp -> PLUS_ASSIGN
Rule 128   AssignOp -> MINUS_ASSIGN
Rule 129   AssignOp -> STAR_ASSIGN
Rule 130   AssignOp -> DIVIDE_ASSIGN
Rule 131   AssignOp -> MOD_ASSIGN
Rule 132   AssignOp -> AND_ASSIGN
Rule 133   AssignOp -> OR_ASSIGN
Rule 134   AssignOp -> XOR_ASSIGN
Rule 135   AssignOp -> LSHIFT_ASSIGN
Rule 136   AssignOp -> RSHIFT_ASSIGN
Rule 137   AssignOp -> ASSIGN
Rule 138   IfStmt -> IF Expression Block ElseOpt
Rule 139   ElseOpt -> ELSE IfStmt
Rule 140   ElseOpt -> ELSE Block
Rule 141   ElseOpt -> empty
Rule 142   SwitchStmt -> CreateNewScope ExprSwitchStmt DelScope
Rule 143   ExprSwitchStmt -> SWITCH Expression LCURL ExprCaseClauseRep RCURL
Rule 144   ExprCaseClauseRep -> ExprCaseClause ExprCaseClauseRep
Rule 145   ExprCaseClauseRep -> empty
Rule 146   ExprCaseClause -> ExprSwitchCase COLON StatementList
Rule 147   ExprSwitchCase -> CASE BasicLit
Rule 148   ExprSwitchCase -> DEFAULT
Rule 149   TypeList -> Type TypeRep
Rule 150   TypeRep -> COMMA Type TypeRep
Rule 151   TypeRep -> empty
Rule 152   ForStmt -> CreateNewScope FOR ForClause Block DelScope
Rule 153   ForClause -> SimpleStmt ConditionOpt SEMICOLON SimpleStmt
Rule 154   ConditionOpt -> empty
Rule 155   ConditionOpt -> Condition
Rule 156   Condition -> Expression
Rule 157   ReturnStmt -> RETURN ExpressionListPureOpt
Rule 158   ExpressionListPureOpt -> ExpressionList
Rule 159   ExpressionListPureOpt -> empty
Rule 160   BreakStmt -> BREAK
Rule 161   ContinueStmt -> CONTINUE

Terminals, with rules where they appear

AND                  : 102 109
AND_ASSIGN           : 132
AND_XOR_ASSIGN       : 
ASSIGN               : 18 19 20 22 137
BREAK                : 160
CASE                 : 147
COLON                : 146
COMMA                : 48 57 60 150
COMMENT              : 
CONST                : 16
CONTINUE             : 161
DECR                 : 125
DEFAULT              : 148
DIVIDE               : 95
DIVIDE_ASSIGN        : 130
DOT                  : 80
ELSE                 : 139 140
EQUALS               : 87
FLOAT                : 
FOR                  : 152
FUNC                 : 40 62
GOTO                 : 
GREATER              : 90
HEX                  : 
IDENTIFIER           : 5 26 56 57 65 75 80 124 125
IF                   : 138
IMAGINARY            : 
IMPORT               : 8 9
INCR                 : 124
INTEGER              : 32 71
LCURL                : 34 52 143
LESSER               : 89
LESS_EQUALS          : 91
LOGICAL_AND          : 86
LOGICAL_OR           : 85
LPAREN               : 9 25 43 44 69 81
LSHIFT               : 97
LSHIFT_ASSIGN        : 135
LSQUARE              : 31 78
MINUS                : 100 107
MINUS_ASSIGN         : 128
MOD                  : 96
MOD_ASSIGN           : 131
MORE_EQUALS          : 92
NOT                  : 105
NOT_ASSIGN           : 88
OR                   : 93
OR_ASSIGN            : 133
PACKAGE              : 4
PLUS                 : 99 106
PLUS_ASSIGN          : 127
QUICK_ASSIGN         : 
RANGE                : 
RCURL                : 34 52 143
RETURN               : 157
RPAREN               : 9 25 43 44 69 81
RSHIFT               : 98
RSHIFT_ASSIGN        : 136
RSQUARE              : 31 78
RUNE                 : 
SEMICOLON            : 3 7 10 35 54 58 119 120 121 122 153
STAR                 : 38 101 108
STAR_ASSIGN          : 129
STRING               : 8 9 72
STRUCT               : 34
SWITCH               : 143
TYPE                 : 
VAR                  : 20 21 22
XOR                  : 94
XOR_ASSIGN           : 134
error                : 

Nonterminals, with rules where they appear

Arguments            : 79
ArrayLength          : 31
ArrayType            : 27
AssignOp             : 126
Assignment           : 122
BaseType             : 38
BasicLit             : 70 147
Block                : 66 115 138 140 152
BreakStmt            : 113
CommaExpRep          : 59 60
CommaIdentRep        : 56 57
CommaParamDeclRep    : 47 48
Condition            : 155
ConditionOpt         : 153
ConstDecl            : 14
ConstSpec            : 16
ContinueStmt         : 114
CreateNewScope       : 52 62 142 152
Declaration          : 12 110
DelScope             : 52 62 142 152
ElementType          : 31
ElseOpt              : 138
ExprCaseClause       : 144
ExprCaseClauseRep    : 143 144
ExprSwitchCase       : 146
ExprSwitchStmt       : 142
Expression           : 59 60 69 78 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 123 138 143 156
ExpressionList       : 18 19 20 22 82 126 126 158
ExpressionListPureOpt : 157
ExpressionListTypeOpt : 81
ExpressionStmt       : 120
FieldDecl            : 35
FieldDeclSemiColonRep : 34 35
ForClause            : 152
ForStmt              : 118
FunBodyOpt           : 62
FunctionBody         : 63
FunctionDecl         : 13
FunctionName         : 62
FunctionType         : 30
IdentifierList       : 17 18 19 20 21 22 37 47 48
IfStmt               : 116 139
ImportDecl           : 7
ImportDeclRep        : 3 7
IncDecStmt           : 121
Int                  : 71
Literal              : 67
Operand              : 76
OperandName          : 68
PackageClause        : 3
PackageName          : 4
ParamCommaOpt        : 44
ParameterList        : 45
Parameters           : 41 42
PointerType          : 29
PrimaryExpr          : 77 78 79 103
Result               : 41
ReturnStmt           : 112
Selector             : 77
Signature            : 40 62
SimpleStmt           : 111 153 153
SourceFile           : 1
StSemiColonRep       : 53 54
Statement            : 54
StatementList        : 52 146
Str                  : 72
StructType           : 28
SwitchStmt           : 117
TopLevelDecl         : 10
TopLevelDeclRep      : 3 10
Type                 : 19 20 21 25 33 37 39 47 48 149 150
TypeList             : 43
TypeLit              : 24
TypeName             : 23
TypeRep              : 149 150
UnaryExpr            : 84 104 105
UnaryOp              : 104
VarDecl              : 15
empty                : 6 11 36 46 49 50 51 55 61 64 73 74 83 119 141 145 151 154 159
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . SourceFile
    (3) SourceFile -> . PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
    (4) PackageClause -> . PACKAGE PackageName

    PACKAGE         shift and go to state 2

    PackageClause                  shift and go to state 1
    SourceFile                     shift and go to state 3
    start                          shift and go to state 4

state 1

    (3) SourceFile -> PackageClause . SEMICOLON ImportDeclRep TopLevelDeclRep

    SEMICOLON       shift and go to state 5


state 2

    (4) PackageClause -> PACKAGE . PackageName
    (5) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 7

    PackageName                    shift and go to state 6

state 3

    (1) start -> SourceFile .

    $end            reduce using rule 1 (start -> SourceFile .)


state 4

    (0) S' -> start .



state 5

    (3) SourceFile -> PackageClause SEMICOLON . ImportDeclRep TopLevelDeclRep
    (6) ImportDeclRep -> . empty
    (7) ImportDeclRep -> . ImportDecl SEMICOLON ImportDeclRep
    (2) empty -> .
    (8) ImportDecl -> . IMPORT STRING
    (9) ImportDecl -> . IMPORT LPAREN STRING RPAREN

    FUNC            reduce using rule 2 (empty -> .)
    CONST           reduce using rule 2 (empty -> .)
    VAR             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    IMPORT          shift and go to state 9

    ImportDeclRep                  shift and go to state 10
    empty                          shift and go to state 11
    ImportDecl                     shift and go to state 8

state 6

    (4) PackageClause -> PACKAGE PackageName .

    SEMICOLON       reduce using rule 4 (PackageClause -> PACKAGE PackageName .)


state 7

    (5) PackageName -> IDENTIFIER .

    SEMICOLON       reduce using rule 5 (PackageName -> IDENTIFIER .)


state 8

    (7) ImportDeclRep -> ImportDecl . SEMICOLON ImportDeclRep

    SEMICOLON       shift and go to state 12


state 9

    (8) ImportDecl -> IMPORT . STRING
    (9) ImportDecl -> IMPORT . LPAREN STRING RPAREN

    STRING          shift and go to state 13
    LPAREN          shift and go to state 14


state 10

    (3) SourceFile -> PackageClause SEMICOLON ImportDeclRep . TopLevelDeclRep
    (10) TopLevelDeclRep -> . TopLevelDecl SEMICOLON TopLevelDeclRep
    (11) TopLevelDeclRep -> . empty
    (12) TopLevelDecl -> . Declaration
    (13) TopLevelDecl -> . FunctionDecl
    (2) empty -> .
    (14) Declaration -> . ConstDecl
    (15) Declaration -> . VarDecl
    (62) FunctionDecl -> . FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope
    (16) ConstDecl -> . CONST ConstSpec
    (20) VarDecl -> . VAR IdentifierList Type ASSIGN ExpressionList
    (21) VarDecl -> . VAR IdentifierList Type
    (22) VarDecl -> . VAR IdentifierList ASSIGN ExpressionList

    $end            reduce using rule 2 (empty -> .)
    FUNC            shift and go to state 21
    CONST           shift and go to state 15
    VAR             shift and go to state 22

    TopLevelDeclRep                shift and go to state 20
    VarDecl                        shift and go to state 23
    FunctionDecl                   shift and go to state 16
    TopLevelDecl                   shift and go to state 17
    Declaration                    shift and go to state 18
    ConstDecl                      shift and go to state 24
    empty                          shift and go to state 19

state 11

    (6) ImportDeclRep -> empty .

    FUNC            reduce using rule 6 (ImportDeclRep -> empty .)
    CONST           reduce using rule 6 (ImportDeclRep -> empty .)
    VAR             reduce using rule 6 (ImportDeclRep -> empty .)
    $end            reduce using rule 6 (ImportDeclRep -> empty .)


state 12

    (7) ImportDeclRep -> ImportDecl SEMICOLON . ImportDeclRep
    (6) ImportDeclRep -> . empty
    (7) ImportDeclRep -> . ImportDecl SEMICOLON ImportDeclRep
    (2) empty -> .
    (8) ImportDecl -> . IMPORT STRING
    (9) ImportDecl -> . IMPORT LPAREN STRING RPAREN

    FUNC            reduce using rule 2 (empty -> .)
    CONST           reduce using rule 2 (empty -> .)
    VAR             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    IMPORT          shift and go to state 9

    ImportDecl                     shift and go to state 8
    empty                          shift and go to state 11
    ImportDeclRep                  shift and go to state 25

state 13

    (8) ImportDecl -> IMPORT STRING .

    SEMICOLON       reduce using rule 8 (ImportDecl -> IMPORT STRING .)


state 14

    (9) ImportDecl -> IMPORT LPAREN . STRING RPAREN

    STRING          shift and go to state 26


state 15

    (16) ConstDecl -> CONST . ConstSpec
    (17) ConstSpec -> . IdentifierList
    (18) ConstSpec -> . IdentifierList ASSIGN ExpressionList
    (19) ConstSpec -> . IdentifierList Type ASSIGN ExpressionList
    (56) IdentifierList -> . IDENTIFIER CommaIdentRep

    IDENTIFIER      shift and go to state 29

    ConstSpec                      shift and go to state 27
    IdentifierList                 shift and go to state 28

state 16

    (13) TopLevelDecl -> FunctionDecl .

    SEMICOLON       reduce using rule 13 (TopLevelDecl -> FunctionDecl .)


state 17

    (10) TopLevelDeclRep -> TopLevelDecl . SEMICOLON TopLevelDeclRep

    SEMICOLON       shift and go to state 30


state 18

    (12) TopLevelDecl -> Declaration .

    SEMICOLON       reduce using rule 12 (TopLevelDecl -> Declaration .)


state 19

    (11) TopLevelDeclRep -> empty .

    $end            reduce using rule 11 (TopLevelDeclRep -> empty .)


state 20

    (3) SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .

    $end            reduce using rule 3 (SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .)


state 21

    (62) FunctionDecl -> FUNC . FunctionName CreateNewScope Signature FunBodyOpt DelScope
    (65) FunctionName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 32

    FunctionName                   shift and go to state 31

state 22

    (20) VarDecl -> VAR . IdentifierList Type ASSIGN ExpressionList
    (21) VarDecl -> VAR . IdentifierList Type
    (22) VarDecl -> VAR . IdentifierList ASSIGN ExpressionList
    (56) IdentifierList -> . IDENTIFIER CommaIdentRep

    IDENTIFIER      shift and go to state 29

    IdentifierList                 shift and go to state 33

state 23

    (15) Declaration -> VarDecl .

    SEMICOLON       reduce using rule 15 (Declaration -> VarDecl .)


state 24

    (14) Declaration -> ConstDecl .

    SEMICOLON       reduce using rule 14 (Declaration -> ConstDecl .)


state 25

    (7) ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep .

    FUNC            reduce using rule 7 (ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep .)
    CONST           reduce using rule 7 (ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep .)
    VAR             reduce using rule 7 (ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep .)
    $end            reduce using rule 7 (ImportDeclRep -> ImportDecl SEMICOLON ImportDeclRep .)


state 26

    (9) ImportDecl -> IMPORT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 34


state 27

    (16) ConstDecl -> CONST ConstSpec .

    SEMICOLON       reduce using rule 16 (ConstDecl -> CONST ConstSpec .)


state 28

    (17) ConstSpec -> IdentifierList .
    (18) ConstSpec -> IdentifierList . ASSIGN ExpressionList
    (19) ConstSpec -> IdentifierList . Type ASSIGN ExpressionList
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    SEMICOLON       reduce using rule 17 (ConstSpec -> IdentifierList .)
    ASSIGN          shift and go to state 43
    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    TypeLit                        shift and go to state 39
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    Type                           shift and go to state 40

state 29

    (56) IdentifierList -> IDENTIFIER . CommaIdentRep
    (57) CommaIdentRep -> . COMMA IDENTIFIER CommaIdentRep
    (58) CommaIdentRep -> . SEMICOLON

    COMMA           shift and go to state 49
    SEMICOLON       shift and go to state 50

    CommaIdentRep                  shift and go to state 51

state 30

    (10) TopLevelDeclRep -> TopLevelDecl SEMICOLON . TopLevelDeclRep
    (10) TopLevelDeclRep -> . TopLevelDecl SEMICOLON TopLevelDeclRep
    (11) TopLevelDeclRep -> . empty
    (12) TopLevelDecl -> . Declaration
    (13) TopLevelDecl -> . FunctionDecl
    (2) empty -> .
    (14) Declaration -> . ConstDecl
    (15) Declaration -> . VarDecl
    (62) FunctionDecl -> . FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope
    (16) ConstDecl -> . CONST ConstSpec
    (20) VarDecl -> . VAR IdentifierList Type ASSIGN ExpressionList
    (21) VarDecl -> . VAR IdentifierList Type
    (22) VarDecl -> . VAR IdentifierList ASSIGN ExpressionList

    $end            reduce using rule 2 (empty -> .)
    FUNC            shift and go to state 21
    CONST           shift and go to state 15
    VAR             shift and go to state 22

    TopLevelDeclRep                shift and go to state 52
    VarDecl                        shift and go to state 23
    FunctionDecl                   shift and go to state 16
    TopLevelDecl                   shift and go to state 17
    Declaration                    shift and go to state 18
    ConstDecl                      shift and go to state 24
    empty                          shift and go to state 19

state 31

    (62) FunctionDecl -> FUNC FunctionName . CreateNewScope Signature FunBodyOpt DelScope
    (50) CreateNewScope -> . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)

    CreateNewScope                 shift and go to state 53
    empty                          shift and go to state 54

state 32

    (65) FunctionName -> IDENTIFIER .

    LPAREN          reduce using rule 65 (FunctionName -> IDENTIFIER .)


state 33

    (20) VarDecl -> VAR IdentifierList . Type ASSIGN ExpressionList
    (21) VarDecl -> VAR IdentifierList . Type
    (22) VarDecl -> VAR IdentifierList . ASSIGN ExpressionList
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    ASSIGN          shift and go to state 56
    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    Type                           shift and go to state 55
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 34

    (9) ImportDecl -> IMPORT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 9 (ImportDecl -> IMPORT LPAREN STRING RPAREN .)


state 35

    (40) FunctionType -> FUNC . Signature
    (41) Signature -> . Parameters Result
    (42) Signature -> . Parameters
    (44) Parameters -> . LPAREN ParamCommaOpt RPAREN

    LPAREN          shift and go to state 58

    Parameters                     shift and go to state 57
    Signature                      shift and go to state 59

state 36

    (38) PointerType -> STAR . BaseType
    (39) BaseType -> . Type
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    BaseType                       shift and go to state 61
    Type                           shift and go to state 60
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 37

    (25) Type -> LPAREN . Type RPAREN
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    Type                           shift and go to state 62
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 38

    (27) TypeLit -> ArrayType .

    COMMA           reduce using rule 27 (TypeLit -> ArrayType .)
    RPAREN          reduce using rule 27 (TypeLit -> ArrayType .)
    ASSIGN          reduce using rule 27 (TypeLit -> ArrayType .)
    SEMICOLON       reduce using rule 27 (TypeLit -> ArrayType .)


state 39

    (24) Type -> TypeLit .

    ASSIGN          reduce using rule 24 (Type -> TypeLit .)
    SEMICOLON       reduce using rule 24 (Type -> TypeLit .)
    RPAREN          reduce using rule 24 (Type -> TypeLit .)
    COMMA           reduce using rule 24 (Type -> TypeLit .)


state 40

    (19) ConstSpec -> IdentifierList Type . ASSIGN ExpressionList

    ASSIGN          shift and go to state 63


state 41

    (23) Type -> TypeName .

    ASSIGN          reduce using rule 23 (Type -> TypeName .)
    SEMICOLON       reduce using rule 23 (Type -> TypeName .)
    RPAREN          reduce using rule 23 (Type -> TypeName .)
    COMMA           reduce using rule 23 (Type -> TypeName .)


state 42

    (26) TypeName -> IDENTIFIER .

    SEMICOLON       reduce using rule 26 (TypeName -> IDENTIFIER .)
    ASSIGN          reduce using rule 26 (TypeName -> IDENTIFIER .)
    RPAREN          reduce using rule 26 (TypeName -> IDENTIFIER .)
    COMMA           reduce using rule 26 (TypeName -> IDENTIFIER .)


state 43

    (18) ConstSpec -> IdentifierList ASSIGN . ExpressionList
    (59) ExpressionList -> . Expression CommaExpRep
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 75
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 78
    empty                          shift and go to state 72

state 44

    (28) TypeLit -> StructType .

    COMMA           reduce using rule 28 (TypeLit -> StructType .)
    RPAREN          reduce using rule 28 (TypeLit -> StructType .)
    ASSIGN          reduce using rule 28 (TypeLit -> StructType .)
    SEMICOLON       reduce using rule 28 (TypeLit -> StructType .)


state 45

    (31) ArrayType -> LSQUARE . ArrayLength RSQUARE ElementType
    (32) ArrayLength -> . INTEGER

    INTEGER         shift and go to state 83

    ArrayLength                    shift and go to state 84

state 46

    (34) StructType -> STRUCT . LCURL FieldDeclSemiColonRep RCURL

    LCURL           shift and go to state 85


state 47

    (29) TypeLit -> PointerType .

    COMMA           reduce using rule 29 (TypeLit -> PointerType .)
    RPAREN          reduce using rule 29 (TypeLit -> PointerType .)
    ASSIGN          reduce using rule 29 (TypeLit -> PointerType .)
    SEMICOLON       reduce using rule 29 (TypeLit -> PointerType .)


state 48

    (30) TypeLit -> FunctionType .

    COMMA           reduce using rule 30 (TypeLit -> FunctionType .)
    RPAREN          reduce using rule 30 (TypeLit -> FunctionType .)
    ASSIGN          reduce using rule 30 (TypeLit -> FunctionType .)
    SEMICOLON       reduce using rule 30 (TypeLit -> FunctionType .)


state 49

    (57) CommaIdentRep -> COMMA . IDENTIFIER CommaIdentRep

    IDENTIFIER      shift and go to state 86


state 50

    (58) CommaIdentRep -> SEMICOLON .

    ASSIGN          reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    LPAREN          reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    IDENTIFIER      reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    LSQUARE         reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    STRUCT          reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    STAR            reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    FUNC            reduce using rule 58 (CommaIdentRep -> SEMICOLON .)
    SEMICOLON       reduce using rule 58 (CommaIdentRep -> SEMICOLON .)


state 51

    (56) IdentifierList -> IDENTIFIER CommaIdentRep .

    LPAREN          reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    IDENTIFIER      reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    LSQUARE         reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    STRUCT          reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    STAR            reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    FUNC            reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    ASSIGN          reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)
    SEMICOLON       reduce using rule 56 (IdentifierList -> IDENTIFIER CommaIdentRep .)


state 52

    (10) TopLevelDeclRep -> TopLevelDecl SEMICOLON TopLevelDeclRep .

    $end            reduce using rule 10 (TopLevelDeclRep -> TopLevelDecl SEMICOLON TopLevelDeclRep .)


state 53

    (62) FunctionDecl -> FUNC FunctionName CreateNewScope . Signature FunBodyOpt DelScope
    (41) Signature -> . Parameters Result
    (42) Signature -> . Parameters
    (44) Parameters -> . LPAREN ParamCommaOpt RPAREN

    LPAREN          shift and go to state 58

    Parameters                     shift and go to state 57
    Signature                      shift and go to state 87

state 54

    (50) CreateNewScope -> empty .

    RETURN          reduce using rule 50 (CreateNewScope -> empty .)
    BREAK           reduce using rule 50 (CreateNewScope -> empty .)
    CONTINUE        reduce using rule 50 (CreateNewScope -> empty .)
    LCURL           reduce using rule 50 (CreateNewScope -> empty .)
    IF              reduce using rule 50 (CreateNewScope -> empty .)
    CONST           reduce using rule 50 (CreateNewScope -> empty .)
    VAR             reduce using rule 50 (CreateNewScope -> empty .)
    IDENTIFIER      reduce using rule 50 (CreateNewScope -> empty .)
    NOT             reduce using rule 50 (CreateNewScope -> empty .)
    PLUS            reduce using rule 50 (CreateNewScope -> empty .)
    MINUS           reduce using rule 50 (CreateNewScope -> empty .)
    STAR            reduce using rule 50 (CreateNewScope -> empty .)
    AND             reduce using rule 50 (CreateNewScope -> empty .)
    LPAREN          reduce using rule 50 (CreateNewScope -> empty .)
    RCURL           reduce using rule 50 (CreateNewScope -> empty .)
    SEMICOLON       reduce using rule 50 (CreateNewScope -> empty .)
    FOR             reduce using rule 50 (CreateNewScope -> empty .)
    SWITCH          reduce using rule 50 (CreateNewScope -> empty .)
    INTEGER         reduce using rule 50 (CreateNewScope -> empty .)
    STRING          reduce using rule 50 (CreateNewScope -> empty .)


state 55

    (20) VarDecl -> VAR IdentifierList Type . ASSIGN ExpressionList
    (21) VarDecl -> VAR IdentifierList Type .

    ASSIGN          shift and go to state 88
    SEMICOLON       reduce using rule 21 (VarDecl -> VAR IdentifierList Type .)


state 56

    (22) VarDecl -> VAR IdentifierList ASSIGN . ExpressionList
    (59) ExpressionList -> . Expression CommaExpRep
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 89
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 78
    empty                          shift and go to state 72

state 57

    (41) Signature -> Parameters . Result
    (42) Signature -> Parameters .
    (43) Result -> . LPAREN TypeList RPAREN

    ASSIGN          reduce using rule 42 (Signature -> Parameters .)
    SEMICOLON       reduce using rule 42 (Signature -> Parameters .)
    RPAREN          reduce using rule 42 (Signature -> Parameters .)
    COMMA           reduce using rule 42 (Signature -> Parameters .)
    LCURL           reduce using rule 42 (Signature -> Parameters .)
    LPAREN          shift and go to state 90

    Result                         shift and go to state 91

state 58

    (44) Parameters -> LPAREN . ParamCommaOpt RPAREN
    (45) ParamCommaOpt -> . ParameterList
    (46) ParamCommaOpt -> . empty
    (47) ParameterList -> . IdentifierList Type CommaParamDeclRep
    (2) empty -> .
    (56) IdentifierList -> . IDENTIFIER CommaIdentRep

    RPAREN          reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 29

    ParamCommaOpt                  shift and go to state 92
    ParameterList                  shift and go to state 93
    IdentifierList                 shift and go to state 94
    empty                          shift and go to state 95

state 59

    (40) FunctionType -> FUNC Signature .

    RPAREN          reduce using rule 40 (FunctionType -> FUNC Signature .)
    ASSIGN          reduce using rule 40 (FunctionType -> FUNC Signature .)
    SEMICOLON       reduce using rule 40 (FunctionType -> FUNC Signature .)
    COMMA           reduce using rule 40 (FunctionType -> FUNC Signature .)


state 60

    (39) BaseType -> Type .

    ASSIGN          reduce using rule 39 (BaseType -> Type .)
    SEMICOLON       reduce using rule 39 (BaseType -> Type .)
    RPAREN          reduce using rule 39 (BaseType -> Type .)
    COMMA           reduce using rule 39 (BaseType -> Type .)


state 61

    (38) PointerType -> STAR BaseType .

    COMMA           reduce using rule 38 (PointerType -> STAR BaseType .)
    RPAREN          reduce using rule 38 (PointerType -> STAR BaseType .)
    ASSIGN          reduce using rule 38 (PointerType -> STAR BaseType .)
    SEMICOLON       reduce using rule 38 (PointerType -> STAR BaseType .)


state 62

    (25) Type -> LPAREN Type . RPAREN

    RPAREN          shift and go to state 96


state 63

    (19) ConstSpec -> IdentifierList Type ASSIGN . ExpressionList
    (59) ExpressionList -> . Expression CommaExpRep
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    BasicLit                       shift and go to state 70
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 97
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 78
    empty                          shift and go to state 72

state 64

    (104) UnaryExpr -> UnaryOp . UnaryExpr
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 98
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    empty                          shift and go to state 72

state 65

    (67) Operand -> Literal .

    LSQUARE         reduce using rule 67 (Operand -> Literal .)
    DOT             reduce using rule 67 (Operand -> Literal .)
    LPAREN          reduce using rule 67 (Operand -> Literal .)
    RSQUARE         reduce using rule 67 (Operand -> Literal .)
    LOGICAL_OR      reduce using rule 67 (Operand -> Literal .)
    LOGICAL_AND     reduce using rule 67 (Operand -> Literal .)
    EQUALS          reduce using rule 67 (Operand -> Literal .)
    NOT_ASSIGN      reduce using rule 67 (Operand -> Literal .)
    LESSER          reduce using rule 67 (Operand -> Literal .)
    GREATER         reduce using rule 67 (Operand -> Literal .)
    LESS_EQUALS     reduce using rule 67 (Operand -> Literal .)
    MORE_EQUALS     reduce using rule 67 (Operand -> Literal .)
    OR              reduce using rule 67 (Operand -> Literal .)
    XOR             reduce using rule 67 (Operand -> Literal .)
    DIVIDE          reduce using rule 67 (Operand -> Literal .)
    MOD             reduce using rule 67 (Operand -> Literal .)
    LSHIFT          reduce using rule 67 (Operand -> Literal .)
    RSHIFT          reduce using rule 67 (Operand -> Literal .)
    PLUS            reduce using rule 67 (Operand -> Literal .)
    MINUS           reduce using rule 67 (Operand -> Literal .)
    STAR            reduce using rule 67 (Operand -> Literal .)
    AND             reduce using rule 67 (Operand -> Literal .)
    COMMA           reduce using rule 67 (Operand -> Literal .)
    SEMICOLON       reduce using rule 67 (Operand -> Literal .)
    PLUS_ASSIGN     reduce using rule 67 (Operand -> Literal .)
    MINUS_ASSIGN    reduce using rule 67 (Operand -> Literal .)
    STAR_ASSIGN     reduce using rule 67 (Operand -> Literal .)
    DIVIDE_ASSIGN   reduce using rule 67 (Operand -> Literal .)
    MOD_ASSIGN      reduce using rule 67 (Operand -> Literal .)
    AND_ASSIGN      reduce using rule 67 (Operand -> Literal .)
    OR_ASSIGN       reduce using rule 67 (Operand -> Literal .)
    XOR_ASSIGN      reduce using rule 67 (Operand -> Literal .)
    LSHIFT_ASSIGN   reduce using rule 67 (Operand -> Literal .)
    RSHIFT_ASSIGN   reduce using rule 67 (Operand -> Literal .)
    ASSIGN          reduce using rule 67 (Operand -> Literal .)
    RPAREN          reduce using rule 67 (Operand -> Literal .)
    LCURL           reduce using rule 67 (Operand -> Literal .)


state 66

    (108) UnaryOp -> STAR .

    NOT             reduce using rule 108 (UnaryOp -> STAR .)
    PLUS            reduce using rule 108 (UnaryOp -> STAR .)
    MINUS           reduce using rule 108 (UnaryOp -> STAR .)
    STAR            reduce using rule 108 (UnaryOp -> STAR .)
    AND             reduce using rule 108 (UnaryOp -> STAR .)
    LPAREN          reduce using rule 108 (UnaryOp -> STAR .)
    IDENTIFIER      reduce using rule 108 (UnaryOp -> STAR .)
    INTEGER         reduce using rule 108 (UnaryOp -> STAR .)
    STRING          reduce using rule 108 (UnaryOp -> STAR .)


state 67

    (107) UnaryOp -> MINUS .

    NOT             reduce using rule 107 (UnaryOp -> MINUS .)
    PLUS            reduce using rule 107 (UnaryOp -> MINUS .)
    MINUS           reduce using rule 107 (UnaryOp -> MINUS .)
    STAR            reduce using rule 107 (UnaryOp -> MINUS .)
    AND             reduce using rule 107 (UnaryOp -> MINUS .)
    LPAREN          reduce using rule 107 (UnaryOp -> MINUS .)
    IDENTIFIER      reduce using rule 107 (UnaryOp -> MINUS .)
    INTEGER         reduce using rule 107 (UnaryOp -> MINUS .)
    STRING          reduce using rule 107 (UnaryOp -> MINUS .)


state 68

    (68) Operand -> OperandName .

    LSQUARE         reduce using rule 68 (Operand -> OperandName .)
    DOT             reduce using rule 68 (Operand -> OperandName .)
    LPAREN          reduce using rule 68 (Operand -> OperandName .)
    RSQUARE         reduce using rule 68 (Operand -> OperandName .)
    LOGICAL_OR      reduce using rule 68 (Operand -> OperandName .)
    LOGICAL_AND     reduce using rule 68 (Operand -> OperandName .)
    EQUALS          reduce using rule 68 (Operand -> OperandName .)
    NOT_ASSIGN      reduce using rule 68 (Operand -> OperandName .)
    LESSER          reduce using rule 68 (Operand -> OperandName .)
    GREATER         reduce using rule 68 (Operand -> OperandName .)
    LESS_EQUALS     reduce using rule 68 (Operand -> OperandName .)
    MORE_EQUALS     reduce using rule 68 (Operand -> OperandName .)
    OR              reduce using rule 68 (Operand -> OperandName .)
    XOR             reduce using rule 68 (Operand -> OperandName .)
    DIVIDE          reduce using rule 68 (Operand -> OperandName .)
    MOD             reduce using rule 68 (Operand -> OperandName .)
    LSHIFT          reduce using rule 68 (Operand -> OperandName .)
    RSHIFT          reduce using rule 68 (Operand -> OperandName .)
    PLUS            reduce using rule 68 (Operand -> OperandName .)
    MINUS           reduce using rule 68 (Operand -> OperandName .)
    STAR            reduce using rule 68 (Operand -> OperandName .)
    AND             reduce using rule 68 (Operand -> OperandName .)
    COMMA           reduce using rule 68 (Operand -> OperandName .)
    SEMICOLON       reduce using rule 68 (Operand -> OperandName .)
    PLUS_ASSIGN     reduce using rule 68 (Operand -> OperandName .)
    MINUS_ASSIGN    reduce using rule 68 (Operand -> OperandName .)
    STAR_ASSIGN     reduce using rule 68 (Operand -> OperandName .)
    DIVIDE_ASSIGN   reduce using rule 68 (Operand -> OperandName .)
    MOD_ASSIGN      reduce using rule 68 (Operand -> OperandName .)
    AND_ASSIGN      reduce using rule 68 (Operand -> OperandName .)
    OR_ASSIGN       reduce using rule 68 (Operand -> OperandName .)
    XOR_ASSIGN      reduce using rule 68 (Operand -> OperandName .)
    LSHIFT_ASSIGN   reduce using rule 68 (Operand -> OperandName .)
    RSHIFT_ASSIGN   reduce using rule 68 (Operand -> OperandName .)
    ASSIGN          reduce using rule 68 (Operand -> OperandName .)
    RPAREN          reduce using rule 68 (Operand -> OperandName .)
    LCURL           reduce using rule 68 (Operand -> OperandName .)


state 69

    (72) BasicLit -> Str . STRING

    STRING          shift and go to state 99


state 70

    (70) Literal -> BasicLit .

    LSQUARE         reduce using rule 70 (Literal -> BasicLit .)
    DOT             reduce using rule 70 (Literal -> BasicLit .)
    LPAREN          reduce using rule 70 (Literal -> BasicLit .)
    LOGICAL_OR      reduce using rule 70 (Literal -> BasicLit .)
    LOGICAL_AND     reduce using rule 70 (Literal -> BasicLit .)
    EQUALS          reduce using rule 70 (Literal -> BasicLit .)
    NOT_ASSIGN      reduce using rule 70 (Literal -> BasicLit .)
    LESSER          reduce using rule 70 (Literal -> BasicLit .)
    GREATER         reduce using rule 70 (Literal -> BasicLit .)
    LESS_EQUALS     reduce using rule 70 (Literal -> BasicLit .)
    MORE_EQUALS     reduce using rule 70 (Literal -> BasicLit .)
    OR              reduce using rule 70 (Literal -> BasicLit .)
    XOR             reduce using rule 70 (Literal -> BasicLit .)
    DIVIDE          reduce using rule 70 (Literal -> BasicLit .)
    MOD             reduce using rule 70 (Literal -> BasicLit .)
    LSHIFT          reduce using rule 70 (Literal -> BasicLit .)
    RSHIFT          reduce using rule 70 (Literal -> BasicLit .)
    PLUS            reduce using rule 70 (Literal -> BasicLit .)
    MINUS           reduce using rule 70 (Literal -> BasicLit .)
    STAR            reduce using rule 70 (Literal -> BasicLit .)
    AND             reduce using rule 70 (Literal -> BasicLit .)
    COMMA           reduce using rule 70 (Literal -> BasicLit .)
    SEMICOLON       reduce using rule 70 (Literal -> BasicLit .)
    PLUS_ASSIGN     reduce using rule 70 (Literal -> BasicLit .)
    MINUS_ASSIGN    reduce using rule 70 (Literal -> BasicLit .)
    STAR_ASSIGN     reduce using rule 70 (Literal -> BasicLit .)
    DIVIDE_ASSIGN   reduce using rule 70 (Literal -> BasicLit .)
    MOD_ASSIGN      reduce using rule 70 (Literal -> BasicLit .)
    AND_ASSIGN      reduce using rule 70 (Literal -> BasicLit .)
    OR_ASSIGN       reduce using rule 70 (Literal -> BasicLit .)
    XOR_ASSIGN      reduce using rule 70 (Literal -> BasicLit .)
    LSHIFT_ASSIGN   reduce using rule 70 (Literal -> BasicLit .)
    RSHIFT_ASSIGN   reduce using rule 70 (Literal -> BasicLit .)
    ASSIGN          reduce using rule 70 (Literal -> BasicLit .)
    RPAREN          reduce using rule 70 (Literal -> BasicLit .)
    RSQUARE         reduce using rule 70 (Literal -> BasicLit .)
    LCURL           reduce using rule 70 (Literal -> BasicLit .)


state 71

    (106) UnaryOp -> PLUS .

    NOT             reduce using rule 106 (UnaryOp -> PLUS .)
    PLUS            reduce using rule 106 (UnaryOp -> PLUS .)
    MINUS           reduce using rule 106 (UnaryOp -> PLUS .)
    STAR            reduce using rule 106 (UnaryOp -> PLUS .)
    AND             reduce using rule 106 (UnaryOp -> PLUS .)
    LPAREN          reduce using rule 106 (UnaryOp -> PLUS .)
    IDENTIFIER      reduce using rule 106 (UnaryOp -> PLUS .)
    INTEGER         reduce using rule 106 (UnaryOp -> PLUS .)
    STRING          reduce using rule 106 (UnaryOp -> PLUS .)


state 72

    (73) Int -> empty .
    (74) Str -> empty .

    INTEGER         reduce using rule 73 (Int -> empty .)
    STRING          reduce using rule 74 (Str -> empty .)


state 73

    (84) Expression -> UnaryExpr .

    LOGICAL_OR      reduce using rule 84 (Expression -> UnaryExpr .)
    LOGICAL_AND     reduce using rule 84 (Expression -> UnaryExpr .)
    EQUALS          reduce using rule 84 (Expression -> UnaryExpr .)
    NOT_ASSIGN      reduce using rule 84 (Expression -> UnaryExpr .)
    LESSER          reduce using rule 84 (Expression -> UnaryExpr .)
    GREATER         reduce using rule 84 (Expression -> UnaryExpr .)
    LESS_EQUALS     reduce using rule 84 (Expression -> UnaryExpr .)
    MORE_EQUALS     reduce using rule 84 (Expression -> UnaryExpr .)
    OR              reduce using rule 84 (Expression -> UnaryExpr .)
    XOR             reduce using rule 84 (Expression -> UnaryExpr .)
    DIVIDE          reduce using rule 84 (Expression -> UnaryExpr .)
    MOD             reduce using rule 84 (Expression -> UnaryExpr .)
    LSHIFT          reduce using rule 84 (Expression -> UnaryExpr .)
    RSHIFT          reduce using rule 84 (Expression -> UnaryExpr .)
    PLUS            reduce using rule 84 (Expression -> UnaryExpr .)
    MINUS           reduce using rule 84 (Expression -> UnaryExpr .)
    STAR            reduce using rule 84 (Expression -> UnaryExpr .)
    AND             reduce using rule 84 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 84 (Expression -> UnaryExpr .)
    RPAREN          reduce using rule 84 (Expression -> UnaryExpr .)
    SEMICOLON       reduce using rule 84 (Expression -> UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 84 (Expression -> UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 84 (Expression -> UnaryExpr .)
    STAR_ASSIGN     reduce using rule 84 (Expression -> UnaryExpr .)
    DIVIDE_ASSIGN   reduce using rule 84 (Expression -> UnaryExpr .)
    MOD_ASSIGN      reduce using rule 84 (Expression -> UnaryExpr .)
    AND_ASSIGN      reduce using rule 84 (Expression -> UnaryExpr .)
    OR_ASSIGN       reduce using rule 84 (Expression -> UnaryExpr .)
    XOR_ASSIGN      reduce using rule 84 (Expression -> UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 84 (Expression -> UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 84 (Expression -> UnaryExpr .)
    ASSIGN          reduce using rule 84 (Expression -> UnaryExpr .)
    RSQUARE         reduce using rule 84 (Expression -> UnaryExpr .)
    LCURL           reduce using rule 84 (Expression -> UnaryExpr .)


state 74

    (105) UnaryExpr -> NOT . UnaryExpr
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 100
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    empty                          shift and go to state 72

state 75

    (18) ConstSpec -> IdentifierList ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 18 (ConstSpec -> IdentifierList ASSIGN ExpressionList .)


state 76

    (76) PrimaryExpr -> Operand .

    LSQUARE         reduce using rule 76 (PrimaryExpr -> Operand .)
    DOT             reduce using rule 76 (PrimaryExpr -> Operand .)
    LPAREN          reduce using rule 76 (PrimaryExpr -> Operand .)
    LOGICAL_OR      reduce using rule 76 (PrimaryExpr -> Operand .)
    LOGICAL_AND     reduce using rule 76 (PrimaryExpr -> Operand .)
    EQUALS          reduce using rule 76 (PrimaryExpr -> Operand .)
    NOT_ASSIGN      reduce using rule 76 (PrimaryExpr -> Operand .)
    LESSER          reduce using rule 76 (PrimaryExpr -> Operand .)
    GREATER         reduce using rule 76 (PrimaryExpr -> Operand .)
    LESS_EQUALS     reduce using rule 76 (PrimaryExpr -> Operand .)
    MORE_EQUALS     reduce using rule 76 (PrimaryExpr -> Operand .)
    OR              reduce using rule 76 (PrimaryExpr -> Operand .)
    XOR             reduce using rule 76 (PrimaryExpr -> Operand .)
    DIVIDE          reduce using rule 76 (PrimaryExpr -> Operand .)
    MOD             reduce using rule 76 (PrimaryExpr -> Operand .)
    LSHIFT          reduce using rule 76 (PrimaryExpr -> Operand .)
    RSHIFT          reduce using rule 76 (PrimaryExpr -> Operand .)
    PLUS            reduce using rule 76 (PrimaryExpr -> Operand .)
    MINUS           reduce using rule 76 (PrimaryExpr -> Operand .)
    STAR            reduce using rule 76 (PrimaryExpr -> Operand .)
    AND             reduce using rule 76 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 76 (PrimaryExpr -> Operand .)
    SEMICOLON       reduce using rule 76 (PrimaryExpr -> Operand .)
    RPAREN          reduce using rule 76 (PrimaryExpr -> Operand .)
    PLUS_ASSIGN     reduce using rule 76 (PrimaryExpr -> Operand .)
    MINUS_ASSIGN    reduce using rule 76 (PrimaryExpr -> Operand .)
    STAR_ASSIGN     reduce using rule 76 (PrimaryExpr -> Operand .)
    DIVIDE_ASSIGN   reduce using rule 76 (PrimaryExpr -> Operand .)
    MOD_ASSIGN      reduce using rule 76 (PrimaryExpr -> Operand .)
    AND_ASSIGN      reduce using rule 76 (PrimaryExpr -> Operand .)
    OR_ASSIGN       reduce using rule 76 (PrimaryExpr -> Operand .)
    XOR_ASSIGN      reduce using rule 76 (PrimaryExpr -> Operand .)
    LSHIFT_ASSIGN   reduce using rule 76 (PrimaryExpr -> Operand .)
    RSHIFT_ASSIGN   reduce using rule 76 (PrimaryExpr -> Operand .)
    ASSIGN          reduce using rule 76 (PrimaryExpr -> Operand .)
    RSQUARE         reduce using rule 76 (PrimaryExpr -> Operand .)
    LCURL           reduce using rule 76 (PrimaryExpr -> Operand .)


state 77

    (69) Operand -> LPAREN . Expression RPAREN
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 101
    empty                          shift and go to state 72

state 78

    (59) ExpressionList -> Expression . CommaExpRep
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression
    (60) CommaExpRep -> . COMMA Expression CommaExpRep
    (61) CommaExpRep -> . empty
    (2) empty -> .

    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117
    COMMA           shift and go to state 110
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    CommaExpRep                    shift and go to state 115
    empty                          shift and go to state 112

state 79

    (109) UnaryOp -> AND .

    NOT             reduce using rule 109 (UnaryOp -> AND .)
    PLUS            reduce using rule 109 (UnaryOp -> AND .)
    MINUS           reduce using rule 109 (UnaryOp -> AND .)
    STAR            reduce using rule 109 (UnaryOp -> AND .)
    AND             reduce using rule 109 (UnaryOp -> AND .)
    LPAREN          reduce using rule 109 (UnaryOp -> AND .)
    IDENTIFIER      reduce using rule 109 (UnaryOp -> AND .)
    INTEGER         reduce using rule 109 (UnaryOp -> AND .)
    STRING          reduce using rule 109 (UnaryOp -> AND .)


state 80

    (75) OperandName -> IDENTIFIER .

    LSQUARE         reduce using rule 75 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 75 (OperandName -> IDENTIFIER .)
    LPAREN          reduce using rule 75 (OperandName -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 75 (OperandName -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 75 (OperandName -> IDENTIFIER .)
    EQUALS          reduce using rule 75 (OperandName -> IDENTIFIER .)
    NOT_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    LESSER          reduce using rule 75 (OperandName -> IDENTIFIER .)
    GREATER         reduce using rule 75 (OperandName -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 75 (OperandName -> IDENTIFIER .)
    MORE_EQUALS     reduce using rule 75 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 75 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 75 (OperandName -> IDENTIFIER .)
    DIVIDE          reduce using rule 75 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 75 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 75 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 75 (OperandName -> IDENTIFIER .)
    PLUS            reduce using rule 75 (OperandName -> IDENTIFIER .)
    MINUS           reduce using rule 75 (OperandName -> IDENTIFIER .)
    STAR            reduce using rule 75 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 75 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 75 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 75 (OperandName -> IDENTIFIER .)
    RPAREN          reduce using rule 75 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 75 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 75 (OperandName -> IDENTIFIER .)
    STAR_ASSIGN     reduce using rule 75 (OperandName -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 75 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 75 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 75 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 75 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 75 (OperandName -> IDENTIFIER .)
    RSQUARE         reduce using rule 75 (OperandName -> IDENTIFIER .)
    LCURL           reduce using rule 75 (OperandName -> IDENTIFIER .)


state 81

    (71) BasicLit -> Int . INTEGER

    INTEGER         shift and go to state 123


state 82

    (103) UnaryExpr -> PrimaryExpr .
    (77) PrimaryExpr -> PrimaryExpr . Selector
    (78) PrimaryExpr -> PrimaryExpr . LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> PrimaryExpr . Arguments
    (80) Selector -> . DOT IDENTIFIER
    (81) Arguments -> . LPAREN ExpressionListTypeOpt RPAREN

    LOGICAL_OR      reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LOGICAL_AND     reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    EQUALS          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    NOT_ASSIGN      reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LESSER          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    GREATER         reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LESS_EQUALS     reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    MORE_EQUALS     reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    XOR             reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    DIVIDE          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    MOD             reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LSHIFT          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    RSHIFT          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    PLUS            reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    MINUS           reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    STAR            reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    AND             reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    SEMICOLON       reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    RPAREN          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    PLUS_ASSIGN     reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    MINUS_ASSIGN    reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    STAR_ASSIGN     reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    DIVIDE_ASSIGN   reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    MOD_ASSIGN      reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    AND_ASSIGN      reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    OR_ASSIGN       reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    XOR_ASSIGN      reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    ASSIGN          reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    RSQUARE         reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LCURL           reduce using rule 103 (UnaryExpr -> PrimaryExpr .)
    LSQUARE         shift and go to state 127
    DOT             shift and go to state 128
    LPAREN          shift and go to state 124

    Arguments                      shift and go to state 126
    Selector                       shift and go to state 125

state 83

    (32) ArrayLength -> INTEGER .

    RSQUARE         reduce using rule 32 (ArrayLength -> INTEGER .)


state 84

    (31) ArrayType -> LSQUARE ArrayLength . RSQUARE ElementType

    RSQUARE         shift and go to state 129


state 85

    (34) StructType -> STRUCT LCURL . FieldDeclSemiColonRep RCURL
    (35) FieldDeclSemiColonRep -> . FieldDecl SEMICOLON FieldDeclSemiColonRep
    (36) FieldDeclSemiColonRep -> . empty
    (37) FieldDecl -> . IdentifierList Type
    (2) empty -> .
    (56) IdentifierList -> . IDENTIFIER CommaIdentRep

    RCURL           reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 29

    FieldDecl                      shift and go to state 130
    FieldDeclSemiColonRep          shift and go to state 131
    IdentifierList                 shift and go to state 132
    empty                          shift and go to state 133

state 86

    (57) CommaIdentRep -> COMMA IDENTIFIER . CommaIdentRep
    (57) CommaIdentRep -> . COMMA IDENTIFIER CommaIdentRep
    (58) CommaIdentRep -> . SEMICOLON

    COMMA           shift and go to state 49
    SEMICOLON       shift and go to state 50

    CommaIdentRep                  shift and go to state 134

state 87

    (62) FunctionDecl -> FUNC FunctionName CreateNewScope Signature . FunBodyOpt DelScope
    (63) FunBodyOpt -> . FunctionBody
    (64) FunBodyOpt -> . empty
    (66) FunctionBody -> . Block
    (2) empty -> .
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL

    SEMICOLON       reduce using rule 2 (empty -> .)
    LCURL           shift and go to state 139

    FunctionBody                   shift and go to state 135
    FunBodyOpt                     shift and go to state 136
    Block                          shift and go to state 137
    empty                          shift and go to state 138

state 88

    (20) VarDecl -> VAR IdentifierList Type ASSIGN . ExpressionList
    (59) ExpressionList -> . Expression CommaExpRep
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    BasicLit                       shift and go to state 70
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 140
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 78
    empty                          shift and go to state 72

state 89

    (22) VarDecl -> VAR IdentifierList ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 22 (VarDecl -> VAR IdentifierList ASSIGN ExpressionList .)


state 90

    (43) Result -> LPAREN . TypeList RPAREN
    (149) TypeList -> . Type TypeRep
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    TypeList                       shift and go to state 141
    Type                           shift and go to state 142
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 91

    (41) Signature -> Parameters Result .

    ASSIGN          reduce using rule 41 (Signature -> Parameters Result .)
    SEMICOLON       reduce using rule 41 (Signature -> Parameters Result .)
    RPAREN          reduce using rule 41 (Signature -> Parameters Result .)
    COMMA           reduce using rule 41 (Signature -> Parameters Result .)
    LCURL           reduce using rule 41 (Signature -> Parameters Result .)


state 92

    (44) Parameters -> LPAREN ParamCommaOpt . RPAREN

    RPAREN          shift and go to state 143


state 93

    (45) ParamCommaOpt -> ParameterList .

    RPAREN          reduce using rule 45 (ParamCommaOpt -> ParameterList .)


state 94

    (47) ParameterList -> IdentifierList . Type CommaParamDeclRep
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    Type                           shift and go to state 144
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 95

    (46) ParamCommaOpt -> empty .

    RPAREN          reduce using rule 46 (ParamCommaOpt -> empty .)


state 96

    (25) Type -> LPAREN Type RPAREN .

    ASSIGN          reduce using rule 25 (Type -> LPAREN Type RPAREN .)
    SEMICOLON       reduce using rule 25 (Type -> LPAREN Type RPAREN .)
    RPAREN          reduce using rule 25 (Type -> LPAREN Type RPAREN .)
    COMMA           reduce using rule 25 (Type -> LPAREN Type RPAREN .)


state 97

    (19) ConstSpec -> IdentifierList Type ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 19 (ConstSpec -> IdentifierList Type ASSIGN ExpressionList .)


state 98

    (104) UnaryExpr -> UnaryOp UnaryExpr .

    LOGICAL_OR      reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    LOGICAL_AND     reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    EQUALS          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    NOT_ASSIGN      reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    LESSER          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    GREATER         reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    LESS_EQUALS     reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    MORE_EQUALS     reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR              reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR             reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIVIDE          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD             reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUS            reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUS           reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    STAR            reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND             reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    COMMA           reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    SEMICOLON       reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    RPAREN          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    STAR_ASSIGN     reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIVIDE_ASSIGN   reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD_ASSIGN      reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND_ASSIGN      reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR_ASSIGN       reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR_ASSIGN      reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    ASSIGN          reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSQUARE         reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)
    LCURL           reduce using rule 104 (UnaryExpr -> UnaryOp UnaryExpr .)


state 99

    (72) BasicLit -> Str STRING .

    LSQUARE         reduce using rule 72 (BasicLit -> Str STRING .)
    DOT             reduce using rule 72 (BasicLit -> Str STRING .)
    LPAREN          reduce using rule 72 (BasicLit -> Str STRING .)
    LOGICAL_OR      reduce using rule 72 (BasicLit -> Str STRING .)
    LOGICAL_AND     reduce using rule 72 (BasicLit -> Str STRING .)
    EQUALS          reduce using rule 72 (BasicLit -> Str STRING .)
    NOT_ASSIGN      reduce using rule 72 (BasicLit -> Str STRING .)
    LESSER          reduce using rule 72 (BasicLit -> Str STRING .)
    GREATER         reduce using rule 72 (BasicLit -> Str STRING .)
    LESS_EQUALS     reduce using rule 72 (BasicLit -> Str STRING .)
    MORE_EQUALS     reduce using rule 72 (BasicLit -> Str STRING .)
    OR              reduce using rule 72 (BasicLit -> Str STRING .)
    XOR             reduce using rule 72 (BasicLit -> Str STRING .)
    DIVIDE          reduce using rule 72 (BasicLit -> Str STRING .)
    MOD             reduce using rule 72 (BasicLit -> Str STRING .)
    LSHIFT          reduce using rule 72 (BasicLit -> Str STRING .)
    RSHIFT          reduce using rule 72 (BasicLit -> Str STRING .)
    PLUS            reduce using rule 72 (BasicLit -> Str STRING .)
    MINUS           reduce using rule 72 (BasicLit -> Str STRING .)
    STAR            reduce using rule 72 (BasicLit -> Str STRING .)
    AND             reduce using rule 72 (BasicLit -> Str STRING .)
    COMMA           reduce using rule 72 (BasicLit -> Str STRING .)
    SEMICOLON       reduce using rule 72 (BasicLit -> Str STRING .)
    RPAREN          reduce using rule 72 (BasicLit -> Str STRING .)
    PLUS_ASSIGN     reduce using rule 72 (BasicLit -> Str STRING .)
    MINUS_ASSIGN    reduce using rule 72 (BasicLit -> Str STRING .)
    STAR_ASSIGN     reduce using rule 72 (BasicLit -> Str STRING .)
    DIVIDE_ASSIGN   reduce using rule 72 (BasicLit -> Str STRING .)
    MOD_ASSIGN      reduce using rule 72 (BasicLit -> Str STRING .)
    AND_ASSIGN      reduce using rule 72 (BasicLit -> Str STRING .)
    OR_ASSIGN       reduce using rule 72 (BasicLit -> Str STRING .)
    XOR_ASSIGN      reduce using rule 72 (BasicLit -> Str STRING .)
    LSHIFT_ASSIGN   reduce using rule 72 (BasicLit -> Str STRING .)
    RSHIFT_ASSIGN   reduce using rule 72 (BasicLit -> Str STRING .)
    ASSIGN          reduce using rule 72 (BasicLit -> Str STRING .)
    RSQUARE         reduce using rule 72 (BasicLit -> Str STRING .)
    LCURL           reduce using rule 72 (BasicLit -> Str STRING .)
    COLON           reduce using rule 72 (BasicLit -> Str STRING .)


state 100

    (105) UnaryExpr -> NOT UnaryExpr .

    LOGICAL_OR      reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    LOGICAL_AND     reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    EQUALS          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    NOT_ASSIGN      reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    LESSER          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    GREATER         reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    LESS_EQUALS     reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    MORE_EQUALS     reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    OR              reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    XOR             reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    DIVIDE          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    MOD             reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    PLUS            reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    MINUS           reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    STAR            reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    AND             reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    COMMA           reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    SEMICOLON       reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    RPAREN          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    STAR_ASSIGN     reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    DIVIDE_ASSIGN   reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    MOD_ASSIGN      reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    AND_ASSIGN      reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    OR_ASSIGN       reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    XOR_ASSIGN      reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    ASSIGN          reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    RSQUARE         reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)
    LCURL           reduce using rule 105 (UnaryExpr -> NOT UnaryExpr .)


state 101

    (69) Operand -> LPAREN Expression . RPAREN
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    RPAREN          shift and go to state 145
    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117


state 102

    (101) Expression -> Expression STAR . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 146
    empty                          shift and go to state 72

state 103

    (86) Expression -> Expression LOGICAL_AND . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 147
    empty                          shift and go to state 72

state 104

    (97) Expression -> Expression LSHIFT . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 148
    empty                          shift and go to state 72

state 105

    (98) Expression -> Expression RSHIFT . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 149
    empty                          shift and go to state 72

state 106

    (100) Expression -> Expression MINUS . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 150
    empty                          shift and go to state 72

state 107

    (92) Expression -> Expression MORE_EQUALS . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 151
    empty                          shift and go to state 72

state 108

    (91) Expression -> Expression LESS_EQUALS . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 152
    empty                          shift and go to state 72

state 109

    (99) Expression -> Expression PLUS . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 153
    empty                          shift and go to state 72

state 110

    (60) CommaExpRep -> COMMA . Expression CommaExpRep
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 154
    empty                          shift and go to state 72

state 111

    (88) Expression -> Expression NOT_ASSIGN . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 155
    empty                          shift and go to state 72

state 112

    (61) CommaExpRep -> empty .

    SEMICOLON       reduce using rule 61 (CommaExpRep -> empty .)
    RPAREN          reduce using rule 61 (CommaExpRep -> empty .)
    PLUS_ASSIGN     reduce using rule 61 (CommaExpRep -> empty .)
    MINUS_ASSIGN    reduce using rule 61 (CommaExpRep -> empty .)
    STAR_ASSIGN     reduce using rule 61 (CommaExpRep -> empty .)
    DIVIDE_ASSIGN   reduce using rule 61 (CommaExpRep -> empty .)
    MOD_ASSIGN      reduce using rule 61 (CommaExpRep -> empty .)
    AND_ASSIGN      reduce using rule 61 (CommaExpRep -> empty .)
    OR_ASSIGN       reduce using rule 61 (CommaExpRep -> empty .)
    XOR_ASSIGN      reduce using rule 61 (CommaExpRep -> empty .)
    LSHIFT_ASSIGN   reduce using rule 61 (CommaExpRep -> empty .)
    RSHIFT_ASSIGN   reduce using rule 61 (CommaExpRep -> empty .)
    ASSIGN          reduce using rule 61 (CommaExpRep -> empty .)


state 113

    (94) Expression -> Expression XOR . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 156
    empty                          shift and go to state 72

state 114

    (95) Expression -> Expression DIVIDE . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 157
    empty                          shift and go to state 72

state 115

    (59) ExpressionList -> Expression CommaExpRep .

    SEMICOLON       reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    PLUS_ASSIGN     reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    MINUS_ASSIGN    reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    STAR_ASSIGN     reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    DIVIDE_ASSIGN   reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    MOD_ASSIGN      reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    AND_ASSIGN      reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    OR_ASSIGN       reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    XOR_ASSIGN      reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    LSHIFT_ASSIGN   reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    RSHIFT_ASSIGN   reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    ASSIGN          reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)
    RPAREN          reduce using rule 59 (ExpressionList -> Expression CommaExpRep .)


state 116

    (87) Expression -> Expression EQUALS . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 158
    empty                          shift and go to state 72

state 117

    (102) Expression -> Expression AND . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 159
    empty                          shift and go to state 72

state 118

    (90) Expression -> Expression GREATER . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 160
    empty                          shift and go to state 72

state 119

    (89) Expression -> Expression LESSER . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 161
    empty                          shift and go to state 72

state 120

    (85) Expression -> Expression LOGICAL_OR . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 162
    empty                          shift and go to state 72

state 121

    (93) Expression -> Expression OR . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 163
    empty                          shift and go to state 72

state 122

    (96) Expression -> Expression MOD . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 164
    empty                          shift and go to state 72

state 123

    (71) BasicLit -> Int INTEGER .

    LSQUARE         reduce using rule 71 (BasicLit -> Int INTEGER .)
    DOT             reduce using rule 71 (BasicLit -> Int INTEGER .)
    LPAREN          reduce using rule 71 (BasicLit -> Int INTEGER .)
    LOGICAL_OR      reduce using rule 71 (BasicLit -> Int INTEGER .)
    LOGICAL_AND     reduce using rule 71 (BasicLit -> Int INTEGER .)
    EQUALS          reduce using rule 71 (BasicLit -> Int INTEGER .)
    NOT_ASSIGN      reduce using rule 71 (BasicLit -> Int INTEGER .)
    LESSER          reduce using rule 71 (BasicLit -> Int INTEGER .)
    GREATER         reduce using rule 71 (BasicLit -> Int INTEGER .)
    LESS_EQUALS     reduce using rule 71 (BasicLit -> Int INTEGER .)
    MORE_EQUALS     reduce using rule 71 (BasicLit -> Int INTEGER .)
    OR              reduce using rule 71 (BasicLit -> Int INTEGER .)
    XOR             reduce using rule 71 (BasicLit -> Int INTEGER .)
    DIVIDE          reduce using rule 71 (BasicLit -> Int INTEGER .)
    MOD             reduce using rule 71 (BasicLit -> Int INTEGER .)
    LSHIFT          reduce using rule 71 (BasicLit -> Int INTEGER .)
    RSHIFT          reduce using rule 71 (BasicLit -> Int INTEGER .)
    PLUS            reduce using rule 71 (BasicLit -> Int INTEGER .)
    MINUS           reduce using rule 71 (BasicLit -> Int INTEGER .)
    STAR            reduce using rule 71 (BasicLit -> Int INTEGER .)
    AND             reduce using rule 71 (BasicLit -> Int INTEGER .)
    COMMA           reduce using rule 71 (BasicLit -> Int INTEGER .)
    SEMICOLON       reduce using rule 71 (BasicLit -> Int INTEGER .)
    RPAREN          reduce using rule 71 (BasicLit -> Int INTEGER .)
    PLUS_ASSIGN     reduce using rule 71 (BasicLit -> Int INTEGER .)
    MINUS_ASSIGN    reduce using rule 71 (BasicLit -> Int INTEGER .)
    STAR_ASSIGN     reduce using rule 71 (BasicLit -> Int INTEGER .)
    DIVIDE_ASSIGN   reduce using rule 71 (BasicLit -> Int INTEGER .)
    MOD_ASSIGN      reduce using rule 71 (BasicLit -> Int INTEGER .)
    AND_ASSIGN      reduce using rule 71 (BasicLit -> Int INTEGER .)
    OR_ASSIGN       reduce using rule 71 (BasicLit -> Int INTEGER .)
    XOR_ASSIGN      reduce using rule 71 (BasicLit -> Int INTEGER .)
    LSHIFT_ASSIGN   reduce using rule 71 (BasicLit -> Int INTEGER .)
    RSHIFT_ASSIGN   reduce using rule 71 (BasicLit -> Int INTEGER .)
    ASSIGN          reduce using rule 71 (BasicLit -> Int INTEGER .)
    RSQUARE         reduce using rule 71 (BasicLit -> Int INTEGER .)
    LCURL           reduce using rule 71 (BasicLit -> Int INTEGER .)
    COLON           reduce using rule 71 (BasicLit -> Int INTEGER .)


state 124

    (81) Arguments -> LPAREN . ExpressionListTypeOpt RPAREN
    (82) ExpressionListTypeOpt -> . ExpressionList
    (83) ExpressionListTypeOpt -> . empty
    (59) ExpressionList -> . Expression CommaExpRep
    (2) empty -> .
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    RPAREN          reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    PrimaryExpr                    shift and go to state 82
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 166
    Str                            shift and go to state 69
    ExpressionListTypeOpt          shift and go to state 167
    Operand                        shift and go to state 76
    Expression                     shift and go to state 78
    empty                          shift and go to state 165

state 125

    (77) PrimaryExpr -> PrimaryExpr Selector .

    LSQUARE         reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    DOT             reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LPAREN          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LOGICAL_OR      reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LOGICAL_AND     reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    EQUALS          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    NOT_ASSIGN      reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LESSER          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    GREATER         reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LESS_EQUALS     reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    MORE_EQUALS     reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR             reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD             reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS            reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS           reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    STAR            reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    AND             reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOLON       reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    RPAREN          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_ASSIGN     reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_ASSIGN    reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    STAR_ASSIGN     reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE_ASSIGN   reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD_ASSIGN      reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    AND_ASSIGN      reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_ASSIGN       reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR_ASSIGN      reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT_ASSIGN   reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT_ASSIGN   reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    ASSIGN          reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    RSQUARE         reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)
    LCURL           reduce using rule 77 (PrimaryExpr -> PrimaryExpr Selector .)


state 126

    (79) PrimaryExpr -> PrimaryExpr Arguments .

    LSQUARE         reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    DOT             reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LPAREN          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LOGICAL_OR      reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LOGICAL_AND     reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQUALS          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    NOT_ASSIGN      reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LESSER          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    GREATER         reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LESS_EQUALS     reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    MORE_EQUALS     reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR              reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    XOR             reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    MOD             reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSHIFT          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSHIFT          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS            reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS           reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    STAR            reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    AND             reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    COMMA           reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    SEMICOLON       reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    RPAREN          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS_ASSIGN     reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS_ASSIGN    reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    STAR_ASSIGN     reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE_ASSIGN   reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    MOD_ASSIGN      reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    AND_ASSIGN      reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR_ASSIGN       reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    XOR_ASSIGN      reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSHIFT_ASSIGN   reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSHIFT_ASSIGN   reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    ASSIGN          reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSQUARE         reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)
    LCURL           reduce using rule 79 (PrimaryExpr -> PrimaryExpr Arguments .)


state 127

    (78) PrimaryExpr -> PrimaryExpr LSQUARE . Expression RSQUARE
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 168
    empty                          shift and go to state 72

state 128

    (80) Selector -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 169


state 129

    (31) ArrayType -> LSQUARE ArrayLength RSQUARE . ElementType
    (33) ElementType -> . Type
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    TypeLit                        shift and go to state 39
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    ElementType                    shift and go to state 171
    Type                           shift and go to state 170

state 130

    (35) FieldDeclSemiColonRep -> FieldDecl . SEMICOLON FieldDeclSemiColonRep

    SEMICOLON       shift and go to state 172


state 131

    (34) StructType -> STRUCT LCURL FieldDeclSemiColonRep . RCURL

    RCURL           shift and go to state 173


state 132

    (37) FieldDecl -> IdentifierList . Type
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    Type                           shift and go to state 174
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 133

    (36) FieldDeclSemiColonRep -> empty .

    RCURL           reduce using rule 36 (FieldDeclSemiColonRep -> empty .)


state 134

    (57) CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .

    ASSIGN          reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    LPAREN          reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    IDENTIFIER      reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    LSQUARE         reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    STRUCT          reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    STAR            reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    FUNC            reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)
    SEMICOLON       reduce using rule 57 (CommaIdentRep -> COMMA IDENTIFIER CommaIdentRep .)


state 135

    (63) FunBodyOpt -> FunctionBody .

    SEMICOLON       reduce using rule 63 (FunBodyOpt -> FunctionBody .)


state 136

    (62) FunctionDecl -> FUNC FunctionName CreateNewScope Signature FunBodyOpt . DelScope
    (51) DelScope -> . empty
    (2) empty -> .

    SEMICOLON       reduce using rule 2 (empty -> .)

    DelScope                       shift and go to state 175
    empty                          shift and go to state 176

state 137

    (66) FunctionBody -> Block .

    SEMICOLON       reduce using rule 66 (FunctionBody -> Block .)


state 138

    (64) FunBodyOpt -> empty .

    SEMICOLON       reduce using rule 64 (FunBodyOpt -> empty .)


state 139

    (52) Block -> LCURL . CreateNewScope StatementList DelScope RCURL
    (50) CreateNewScope -> . empty
    (2) empty -> .

    RETURN          reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    CONTINUE        reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    CONST           reduce using rule 2 (empty -> .)
    VAR             reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    STAR            reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    SWITCH          reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    CreateNewScope                 shift and go to state 177
    empty                          shift and go to state 54

state 140

    (20) VarDecl -> VAR IdentifierList Type ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 20 (VarDecl -> VAR IdentifierList Type ASSIGN ExpressionList .)


state 141

    (43) Result -> LPAREN TypeList . RPAREN

    RPAREN          shift and go to state 178


state 142

    (149) TypeList -> Type . TypeRep
    (150) TypeRep -> . COMMA Type TypeRep
    (151) TypeRep -> . empty
    (2) empty -> .

    COMMA           shift and go to state 179
    RPAREN          reduce using rule 2 (empty -> .)

    empty                          shift and go to state 180
    TypeRep                        shift and go to state 181

state 143

    (44) Parameters -> LPAREN ParamCommaOpt RPAREN .

    LPAREN          reduce using rule 44 (Parameters -> LPAREN ParamCommaOpt RPAREN .)
    LCURL           reduce using rule 44 (Parameters -> LPAREN ParamCommaOpt RPAREN .)
    SEMICOLON       reduce using rule 44 (Parameters -> LPAREN ParamCommaOpt RPAREN .)
    ASSIGN          reduce using rule 44 (Parameters -> LPAREN ParamCommaOpt RPAREN .)
    RPAREN          reduce using rule 44 (Parameters -> LPAREN ParamCommaOpt RPAREN .)
    COMMA           reduce using rule 44 (Parameters -> LPAREN ParamCommaOpt RPAREN .)


state 144

    (47) ParameterList -> IdentifierList Type . CommaParamDeclRep
    (48) CommaParamDeclRep -> . COMMA IdentifierList Type CommaParamDeclRep
    (49) CommaParamDeclRep -> . empty
    (2) empty -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 2 (empty -> .)

    CommaParamDeclRep              shift and go to state 182
    empty                          shift and go to state 184

state 145

    (69) Operand -> LPAREN Expression RPAREN .

    LSQUARE         reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    RSQUARE         reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LOGICAL_OR      reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LOGICAL_AND     reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    EQUALS          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    NOT_ASSIGN      reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LESSER          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    GREATER         reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LESS_EQUALS     reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    MORE_EQUALS     reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    OR              reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    XOR             reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LSHIFT          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    RSHIFT          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    STAR            reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    AND             reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    STAR_ASSIGN     reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    MOD_ASSIGN      reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    AND_ASSIGN      reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    OR_ASSIGN       reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    XOR_ASSIGN      reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)
    LCURL           reduce using rule 69 (Operand -> LPAREN Expression RPAREN .)


state 146

    (101) Expression -> Expression STAR Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 101 (Expression -> Expression STAR Expression .)
    LOGICAL_AND     reduce using rule 101 (Expression -> Expression STAR Expression .)
    EQUALS          reduce using rule 101 (Expression -> Expression STAR Expression .)
    NOT_ASSIGN      reduce using rule 101 (Expression -> Expression STAR Expression .)
    LESSER          reduce using rule 101 (Expression -> Expression STAR Expression .)
    GREATER         reduce using rule 101 (Expression -> Expression STAR Expression .)
    LESS_EQUALS     reduce using rule 101 (Expression -> Expression STAR Expression .)
    MORE_EQUALS     reduce using rule 101 (Expression -> Expression STAR Expression .)
    OR              reduce using rule 101 (Expression -> Expression STAR Expression .)
    XOR             reduce using rule 101 (Expression -> Expression STAR Expression .)
    DIVIDE          reduce using rule 101 (Expression -> Expression STAR Expression .)
    MOD             reduce using rule 101 (Expression -> Expression STAR Expression .)
    LSHIFT          reduce using rule 101 (Expression -> Expression STAR Expression .)
    RSHIFT          reduce using rule 101 (Expression -> Expression STAR Expression .)
    PLUS            reduce using rule 101 (Expression -> Expression STAR Expression .)
    MINUS           reduce using rule 101 (Expression -> Expression STAR Expression .)
    STAR            reduce using rule 101 (Expression -> Expression STAR Expression .)
    AND             reduce using rule 101 (Expression -> Expression STAR Expression .)
    COMMA           reduce using rule 101 (Expression -> Expression STAR Expression .)
    RPAREN          reduce using rule 101 (Expression -> Expression STAR Expression .)
    SEMICOLON       reduce using rule 101 (Expression -> Expression STAR Expression .)
    PLUS_ASSIGN     reduce using rule 101 (Expression -> Expression STAR Expression .)
    MINUS_ASSIGN    reduce using rule 101 (Expression -> Expression STAR Expression .)
    STAR_ASSIGN     reduce using rule 101 (Expression -> Expression STAR Expression .)
    DIVIDE_ASSIGN   reduce using rule 101 (Expression -> Expression STAR Expression .)
    MOD_ASSIGN      reduce using rule 101 (Expression -> Expression STAR Expression .)
    AND_ASSIGN      reduce using rule 101 (Expression -> Expression STAR Expression .)
    OR_ASSIGN       reduce using rule 101 (Expression -> Expression STAR Expression .)
    XOR_ASSIGN      reduce using rule 101 (Expression -> Expression STAR Expression .)
    LSHIFT_ASSIGN   reduce using rule 101 (Expression -> Expression STAR Expression .)
    RSHIFT_ASSIGN   reduce using rule 101 (Expression -> Expression STAR Expression .)
    ASSIGN          reduce using rule 101 (Expression -> Expression STAR Expression .)
    RSQUARE         reduce using rule 101 (Expression -> Expression STAR Expression .)
    LCURL           reduce using rule 101 (Expression -> Expression STAR Expression .)

  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! DIVIDE          [ shift and go to state 114 ]
  ! MOD             [ shift and go to state 122 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 109 ]
  ! MINUS           [ shift and go to state 106 ]
  ! STAR            [ shift and go to state 102 ]
  ! AND             [ shift and go to state 117 ]


state 147

    (86) Expression -> Expression LOGICAL_AND Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    LOGICAL_AND     reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    COMMA           reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    RPAREN          reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    SEMICOLON       reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    PLUS_ASSIGN     reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    MINUS_ASSIGN    reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    STAR_ASSIGN     reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    DIVIDE_ASSIGN   reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    MOD_ASSIGN      reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    AND_ASSIGN      reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    OR_ASSIGN       reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    XOR_ASSIGN      reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    LSHIFT_ASSIGN   reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    RSHIFT_ASSIGN   reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    ASSIGN          reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    RSQUARE         reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    LCURL           reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .)
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117

  ! EQUALS          [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! NOT_ASSIGN      [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! LESSER          [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! GREATER         [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! OR              [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! XOR             [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! DIVIDE          [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! MOD             [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! LSHIFT          [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! RSHIFT          [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! PLUS            [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! MINUS           [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! STAR            [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! AND             [ reduce using rule 86 (Expression -> Expression LOGICAL_AND Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]


state 148

    (97) Expression -> Expression LSHIFT Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    LOGICAL_AND     reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    EQUALS          reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    NOT_ASSIGN      reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    LESSER          reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    GREATER         reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    LESS_EQUALS     reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    MORE_EQUALS     reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    OR              reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    XOR             reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    LSHIFT          reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    RSHIFT          reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    AND             reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    COMMA           reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    RPAREN          reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    SEMICOLON       reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    PLUS_ASSIGN     reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    MINUS_ASSIGN    reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    STAR_ASSIGN     reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    DIVIDE_ASSIGN   reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    MOD_ASSIGN      reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    AND_ASSIGN      reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    OR_ASSIGN       reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    XOR_ASSIGN      reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    LSHIFT_ASSIGN   reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    RSHIFT_ASSIGN   reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    ASSIGN          reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    RSQUARE         reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    LCURL           reduce using rule 97 (Expression -> Expression LSHIFT Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 97 (Expression -> Expression LSHIFT Expression .) ]
  ! MOD             [ reduce using rule 97 (Expression -> Expression LSHIFT Expression .) ]
  ! PLUS            [ reduce using rule 97 (Expression -> Expression LSHIFT Expression .) ]
  ! MINUS           [ reduce using rule 97 (Expression -> Expression LSHIFT Expression .) ]
  ! STAR            [ reduce using rule 97 (Expression -> Expression LSHIFT Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! AND             [ shift and go to state 117 ]


state 149

    (98) Expression -> Expression RSHIFT Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    LOGICAL_AND     reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    EQUALS          reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    NOT_ASSIGN      reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    LESSER          reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    GREATER         reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    LESS_EQUALS     reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    MORE_EQUALS     reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    OR              reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    XOR             reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    LSHIFT          reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    RSHIFT          reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    AND             reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    COMMA           reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    RPAREN          reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    SEMICOLON       reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    PLUS_ASSIGN     reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    MINUS_ASSIGN    reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    STAR_ASSIGN     reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    DIVIDE_ASSIGN   reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    MOD_ASSIGN      reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    AND_ASSIGN      reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    OR_ASSIGN       reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    XOR_ASSIGN      reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    LSHIFT_ASSIGN   reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    RSHIFT_ASSIGN   reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    ASSIGN          reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    RSQUARE         reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    LCURL           reduce using rule 98 (Expression -> Expression RSHIFT Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 98 (Expression -> Expression RSHIFT Expression .) ]
  ! MOD             [ reduce using rule 98 (Expression -> Expression RSHIFT Expression .) ]
  ! PLUS            [ reduce using rule 98 (Expression -> Expression RSHIFT Expression .) ]
  ! MINUS           [ reduce using rule 98 (Expression -> Expression RSHIFT Expression .) ]
  ! STAR            [ reduce using rule 98 (Expression -> Expression RSHIFT Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! AND             [ shift and go to state 117 ]


state 150

    (100) Expression -> Expression MINUS Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 100 (Expression -> Expression MINUS Expression .)
    LOGICAL_AND     reduce using rule 100 (Expression -> Expression MINUS Expression .)
    EQUALS          reduce using rule 100 (Expression -> Expression MINUS Expression .)
    NOT_ASSIGN      reduce using rule 100 (Expression -> Expression MINUS Expression .)
    LESSER          reduce using rule 100 (Expression -> Expression MINUS Expression .)
    GREATER         reduce using rule 100 (Expression -> Expression MINUS Expression .)
    LESS_EQUALS     reduce using rule 100 (Expression -> Expression MINUS Expression .)
    MORE_EQUALS     reduce using rule 100 (Expression -> Expression MINUS Expression .)
    OR              reduce using rule 100 (Expression -> Expression MINUS Expression .)
    XOR             reduce using rule 100 (Expression -> Expression MINUS Expression .)
    LSHIFT          reduce using rule 100 (Expression -> Expression MINUS Expression .)
    RSHIFT          reduce using rule 100 (Expression -> Expression MINUS Expression .)
    PLUS            reduce using rule 100 (Expression -> Expression MINUS Expression .)
    MINUS           reduce using rule 100 (Expression -> Expression MINUS Expression .)
    AND             reduce using rule 100 (Expression -> Expression MINUS Expression .)
    COMMA           reduce using rule 100 (Expression -> Expression MINUS Expression .)
    RPAREN          reduce using rule 100 (Expression -> Expression MINUS Expression .)
    SEMICOLON       reduce using rule 100 (Expression -> Expression MINUS Expression .)
    PLUS_ASSIGN     reduce using rule 100 (Expression -> Expression MINUS Expression .)
    MINUS_ASSIGN    reduce using rule 100 (Expression -> Expression MINUS Expression .)
    STAR_ASSIGN     reduce using rule 100 (Expression -> Expression MINUS Expression .)
    DIVIDE_ASSIGN   reduce using rule 100 (Expression -> Expression MINUS Expression .)
    MOD_ASSIGN      reduce using rule 100 (Expression -> Expression MINUS Expression .)
    AND_ASSIGN      reduce using rule 100 (Expression -> Expression MINUS Expression .)
    OR_ASSIGN       reduce using rule 100 (Expression -> Expression MINUS Expression .)
    XOR_ASSIGN      reduce using rule 100 (Expression -> Expression MINUS Expression .)
    LSHIFT_ASSIGN   reduce using rule 100 (Expression -> Expression MINUS Expression .)
    RSHIFT_ASSIGN   reduce using rule 100 (Expression -> Expression MINUS Expression .)
    ASSIGN          reduce using rule 100 (Expression -> Expression MINUS Expression .)
    RSQUARE         reduce using rule 100 (Expression -> Expression MINUS Expression .)
    LCURL           reduce using rule 100 (Expression -> Expression MINUS Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 100 (Expression -> Expression MINUS Expression .) ]
  ! MOD             [ reduce using rule 100 (Expression -> Expression MINUS Expression .) ]
  ! STAR            [ reduce using rule 100 (Expression -> Expression MINUS Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 109 ]
  ! MINUS           [ shift and go to state 106 ]
  ! AND             [ shift and go to state 117 ]


state 151

    (92) Expression -> Expression MORE_EQUALS Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    LOGICAL_AND     reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    EQUALS          reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    NOT_ASSIGN      reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    LESSER          reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    GREATER         reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    LESS_EQUALS     reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    MORE_EQUALS     reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    OR              reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    XOR             reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    AND             reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    COMMA           reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    RPAREN          reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    SEMICOLON       reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    PLUS_ASSIGN     reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    MINUS_ASSIGN    reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    STAR_ASSIGN     reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    DIVIDE_ASSIGN   reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    MOD_ASSIGN      reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    AND_ASSIGN      reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    OR_ASSIGN       reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    XOR_ASSIGN      reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    LSHIFT_ASSIGN   reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    RSHIFT_ASSIGN   reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    ASSIGN          reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    RSQUARE         reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    LCURL           reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! MOD             [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! LSHIFT          [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! RSHIFT          [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! PLUS            [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! MINUS           [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! STAR            [ reduce using rule 92 (Expression -> Expression MORE_EQUALS Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 152

    (91) Expression -> Expression LESS_EQUALS Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    LOGICAL_AND     reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    EQUALS          reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    NOT_ASSIGN      reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    LESSER          reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    GREATER         reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    LESS_EQUALS     reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    MORE_EQUALS     reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    OR              reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    XOR             reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    AND             reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    COMMA           reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    RPAREN          reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    SEMICOLON       reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    PLUS_ASSIGN     reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    MINUS_ASSIGN    reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    STAR_ASSIGN     reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    DIVIDE_ASSIGN   reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    MOD_ASSIGN      reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    AND_ASSIGN      reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    OR_ASSIGN       reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    XOR_ASSIGN      reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    LSHIFT_ASSIGN   reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    RSHIFT_ASSIGN   reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    ASSIGN          reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    RSQUARE         reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    LCURL           reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! MOD             [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! LSHIFT          [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! RSHIFT          [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! PLUS            [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! MINUS           [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! STAR            [ reduce using rule 91 (Expression -> Expression LESS_EQUALS Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 153

    (99) Expression -> Expression PLUS Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 99 (Expression -> Expression PLUS Expression .)
    LOGICAL_AND     reduce using rule 99 (Expression -> Expression PLUS Expression .)
    EQUALS          reduce using rule 99 (Expression -> Expression PLUS Expression .)
    NOT_ASSIGN      reduce using rule 99 (Expression -> Expression PLUS Expression .)
    LESSER          reduce using rule 99 (Expression -> Expression PLUS Expression .)
    GREATER         reduce using rule 99 (Expression -> Expression PLUS Expression .)
    LESS_EQUALS     reduce using rule 99 (Expression -> Expression PLUS Expression .)
    MORE_EQUALS     reduce using rule 99 (Expression -> Expression PLUS Expression .)
    OR              reduce using rule 99 (Expression -> Expression PLUS Expression .)
    XOR             reduce using rule 99 (Expression -> Expression PLUS Expression .)
    LSHIFT          reduce using rule 99 (Expression -> Expression PLUS Expression .)
    RSHIFT          reduce using rule 99 (Expression -> Expression PLUS Expression .)
    PLUS            reduce using rule 99 (Expression -> Expression PLUS Expression .)
    MINUS           reduce using rule 99 (Expression -> Expression PLUS Expression .)
    AND             reduce using rule 99 (Expression -> Expression PLUS Expression .)
    COMMA           reduce using rule 99 (Expression -> Expression PLUS Expression .)
    RPAREN          reduce using rule 99 (Expression -> Expression PLUS Expression .)
    SEMICOLON       reduce using rule 99 (Expression -> Expression PLUS Expression .)
    PLUS_ASSIGN     reduce using rule 99 (Expression -> Expression PLUS Expression .)
    MINUS_ASSIGN    reduce using rule 99 (Expression -> Expression PLUS Expression .)
    STAR_ASSIGN     reduce using rule 99 (Expression -> Expression PLUS Expression .)
    DIVIDE_ASSIGN   reduce using rule 99 (Expression -> Expression PLUS Expression .)
    MOD_ASSIGN      reduce using rule 99 (Expression -> Expression PLUS Expression .)
    AND_ASSIGN      reduce using rule 99 (Expression -> Expression PLUS Expression .)
    OR_ASSIGN       reduce using rule 99 (Expression -> Expression PLUS Expression .)
    XOR_ASSIGN      reduce using rule 99 (Expression -> Expression PLUS Expression .)
    LSHIFT_ASSIGN   reduce using rule 99 (Expression -> Expression PLUS Expression .)
    RSHIFT_ASSIGN   reduce using rule 99 (Expression -> Expression PLUS Expression .)
    ASSIGN          reduce using rule 99 (Expression -> Expression PLUS Expression .)
    RSQUARE         reduce using rule 99 (Expression -> Expression PLUS Expression .)
    LCURL           reduce using rule 99 (Expression -> Expression PLUS Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 99 (Expression -> Expression PLUS Expression .) ]
  ! MOD             [ reduce using rule 99 (Expression -> Expression PLUS Expression .) ]
  ! STAR            [ reduce using rule 99 (Expression -> Expression PLUS Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 109 ]
  ! MINUS           [ shift and go to state 106 ]
  ! AND             [ shift and go to state 117 ]


state 154

    (60) CommaExpRep -> COMMA Expression . CommaExpRep
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression
    (60) CommaExpRep -> . COMMA Expression CommaExpRep
    (61) CommaExpRep -> . empty
    (2) empty -> .

    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117
    COMMA           shift and go to state 110
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    PLUS_ASSIGN     reduce using rule 2 (empty -> .)
    MINUS_ASSIGN    reduce using rule 2 (empty -> .)
    STAR_ASSIGN     reduce using rule 2 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 2 (empty -> .)
    MOD_ASSIGN      reduce using rule 2 (empty -> .)
    AND_ASSIGN      reduce using rule 2 (empty -> .)
    OR_ASSIGN       reduce using rule 2 (empty -> .)
    XOR_ASSIGN      reduce using rule 2 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 2 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)

    CommaExpRep                    shift and go to state 185
    empty                          shift and go to state 112

state 155

    (88) Expression -> Expression NOT_ASSIGN Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    LOGICAL_AND     reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    EQUALS          reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    NOT_ASSIGN      reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    OR              reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    XOR             reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    AND             reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    COMMA           reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    RPAREN          reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    SEMICOLON       reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    PLUS_ASSIGN     reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    MINUS_ASSIGN    reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    STAR_ASSIGN     reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    DIVIDE_ASSIGN   reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    MOD_ASSIGN      reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    AND_ASSIGN      reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    OR_ASSIGN       reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    XOR_ASSIGN      reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    LSHIFT_ASSIGN   reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    RSHIFT_ASSIGN   reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    ASSIGN          reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    RSQUARE         reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    LCURL           reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .)
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! LESSER          [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! GREATER         [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! DIVIDE          [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! MOD             [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! LSHIFT          [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! RSHIFT          [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! PLUS            [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! MINUS           [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! STAR            [ reduce using rule 88 (Expression -> Expression NOT_ASSIGN Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 156

    (94) Expression -> Expression XOR Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 94 (Expression -> Expression XOR Expression .)
    LOGICAL_AND     reduce using rule 94 (Expression -> Expression XOR Expression .)
    OR              reduce using rule 94 (Expression -> Expression XOR Expression .)
    XOR             reduce using rule 94 (Expression -> Expression XOR Expression .)
    COMMA           reduce using rule 94 (Expression -> Expression XOR Expression .)
    RPAREN          reduce using rule 94 (Expression -> Expression XOR Expression .)
    SEMICOLON       reduce using rule 94 (Expression -> Expression XOR Expression .)
    PLUS_ASSIGN     reduce using rule 94 (Expression -> Expression XOR Expression .)
    MINUS_ASSIGN    reduce using rule 94 (Expression -> Expression XOR Expression .)
    STAR_ASSIGN     reduce using rule 94 (Expression -> Expression XOR Expression .)
    DIVIDE_ASSIGN   reduce using rule 94 (Expression -> Expression XOR Expression .)
    MOD_ASSIGN      reduce using rule 94 (Expression -> Expression XOR Expression .)
    AND_ASSIGN      reduce using rule 94 (Expression -> Expression XOR Expression .)
    OR_ASSIGN       reduce using rule 94 (Expression -> Expression XOR Expression .)
    XOR_ASSIGN      reduce using rule 94 (Expression -> Expression XOR Expression .)
    LSHIFT_ASSIGN   reduce using rule 94 (Expression -> Expression XOR Expression .)
    RSHIFT_ASSIGN   reduce using rule 94 (Expression -> Expression XOR Expression .)
    ASSIGN          reduce using rule 94 (Expression -> Expression XOR Expression .)
    RSQUARE         reduce using rule 94 (Expression -> Expression XOR Expression .)
    LCURL           reduce using rule 94 (Expression -> Expression XOR Expression .)
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117

  ! EQUALS          [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! NOT_ASSIGN      [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! LESSER          [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! GREATER         [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! DIVIDE          [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! MOD             [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! LSHIFT          [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! RSHIFT          [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! PLUS            [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! MINUS           [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! STAR            [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! AND             [ reduce using rule 94 (Expression -> Expression XOR Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]


state 157

    (95) Expression -> Expression DIVIDE Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    LOGICAL_AND     reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    EQUALS          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    NOT_ASSIGN      reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    LESSER          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    GREATER         reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    LESS_EQUALS     reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    MORE_EQUALS     reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    OR              reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    XOR             reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    MOD             reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    LSHIFT          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    RSHIFT          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    STAR            reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    AND             reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    RPAREN          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    SEMICOLON       reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    PLUS_ASSIGN     reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    MINUS_ASSIGN    reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    STAR_ASSIGN     reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    DIVIDE_ASSIGN   reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    MOD_ASSIGN      reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    AND_ASSIGN      reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    OR_ASSIGN       reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    XOR_ASSIGN      reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    LSHIFT_ASSIGN   reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    RSHIFT_ASSIGN   reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    ASSIGN          reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    RSQUARE         reduce using rule 95 (Expression -> Expression DIVIDE Expression .)
    LCURL           reduce using rule 95 (Expression -> Expression DIVIDE Expression .)

  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! DIVIDE          [ shift and go to state 114 ]
  ! MOD             [ shift and go to state 122 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 109 ]
  ! MINUS           [ shift and go to state 106 ]
  ! STAR            [ shift and go to state 102 ]
  ! AND             [ shift and go to state 117 ]


state 158

    (87) Expression -> Expression EQUALS Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    LOGICAL_AND     reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    EQUALS          reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    NOT_ASSIGN      reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    OR              reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    XOR             reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    AND             reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    COMMA           reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    RPAREN          reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    SEMICOLON       reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    PLUS_ASSIGN     reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    MINUS_ASSIGN    reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    STAR_ASSIGN     reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    DIVIDE_ASSIGN   reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    MOD_ASSIGN      reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    AND_ASSIGN      reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    OR_ASSIGN       reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    XOR_ASSIGN      reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    LSHIFT_ASSIGN   reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    RSHIFT_ASSIGN   reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    ASSIGN          reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    RSQUARE         reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    LCURL           reduce using rule 87 (Expression -> Expression EQUALS Expression .)
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! LESSER          [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! GREATER         [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! DIVIDE          [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! MOD             [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! LSHIFT          [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! RSHIFT          [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! PLUS            [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! MINUS           [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! STAR            [ reduce using rule 87 (Expression -> Expression EQUALS Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 159

    (102) Expression -> Expression AND Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 102 (Expression -> Expression AND Expression .)
    LOGICAL_AND     reduce using rule 102 (Expression -> Expression AND Expression .)
    OR              reduce using rule 102 (Expression -> Expression AND Expression .)
    XOR             reduce using rule 102 (Expression -> Expression AND Expression .)
    AND             reduce using rule 102 (Expression -> Expression AND Expression .)
    COMMA           reduce using rule 102 (Expression -> Expression AND Expression .)
    RPAREN          reduce using rule 102 (Expression -> Expression AND Expression .)
    SEMICOLON       reduce using rule 102 (Expression -> Expression AND Expression .)
    PLUS_ASSIGN     reduce using rule 102 (Expression -> Expression AND Expression .)
    MINUS_ASSIGN    reduce using rule 102 (Expression -> Expression AND Expression .)
    STAR_ASSIGN     reduce using rule 102 (Expression -> Expression AND Expression .)
    DIVIDE_ASSIGN   reduce using rule 102 (Expression -> Expression AND Expression .)
    MOD_ASSIGN      reduce using rule 102 (Expression -> Expression AND Expression .)
    AND_ASSIGN      reduce using rule 102 (Expression -> Expression AND Expression .)
    OR_ASSIGN       reduce using rule 102 (Expression -> Expression AND Expression .)
    XOR_ASSIGN      reduce using rule 102 (Expression -> Expression AND Expression .)
    LSHIFT_ASSIGN   reduce using rule 102 (Expression -> Expression AND Expression .)
    RSHIFT_ASSIGN   reduce using rule 102 (Expression -> Expression AND Expression .)
    ASSIGN          reduce using rule 102 (Expression -> Expression AND Expression .)
    RSQUARE         reduce using rule 102 (Expression -> Expression AND Expression .)
    LCURL           reduce using rule 102 (Expression -> Expression AND Expression .)
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! EQUALS          [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! NOT_ASSIGN      [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! LESSER          [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! GREATER         [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! DIVIDE          [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! MOD             [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! LSHIFT          [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! RSHIFT          [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! PLUS            [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! MINUS           [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! STAR            [ reduce using rule 102 (Expression -> Expression AND Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 160

    (90) Expression -> Expression GREATER Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 90 (Expression -> Expression GREATER Expression .)
    LOGICAL_AND     reduce using rule 90 (Expression -> Expression GREATER Expression .)
    EQUALS          reduce using rule 90 (Expression -> Expression GREATER Expression .)
    NOT_ASSIGN      reduce using rule 90 (Expression -> Expression GREATER Expression .)
    LESSER          reduce using rule 90 (Expression -> Expression GREATER Expression .)
    GREATER         reduce using rule 90 (Expression -> Expression GREATER Expression .)
    LESS_EQUALS     reduce using rule 90 (Expression -> Expression GREATER Expression .)
    MORE_EQUALS     reduce using rule 90 (Expression -> Expression GREATER Expression .)
    OR              reduce using rule 90 (Expression -> Expression GREATER Expression .)
    XOR             reduce using rule 90 (Expression -> Expression GREATER Expression .)
    AND             reduce using rule 90 (Expression -> Expression GREATER Expression .)
    COMMA           reduce using rule 90 (Expression -> Expression GREATER Expression .)
    RPAREN          reduce using rule 90 (Expression -> Expression GREATER Expression .)
    SEMICOLON       reduce using rule 90 (Expression -> Expression GREATER Expression .)
    PLUS_ASSIGN     reduce using rule 90 (Expression -> Expression GREATER Expression .)
    MINUS_ASSIGN    reduce using rule 90 (Expression -> Expression GREATER Expression .)
    STAR_ASSIGN     reduce using rule 90 (Expression -> Expression GREATER Expression .)
    DIVIDE_ASSIGN   reduce using rule 90 (Expression -> Expression GREATER Expression .)
    MOD_ASSIGN      reduce using rule 90 (Expression -> Expression GREATER Expression .)
    AND_ASSIGN      reduce using rule 90 (Expression -> Expression GREATER Expression .)
    OR_ASSIGN       reduce using rule 90 (Expression -> Expression GREATER Expression .)
    XOR_ASSIGN      reduce using rule 90 (Expression -> Expression GREATER Expression .)
    LSHIFT_ASSIGN   reduce using rule 90 (Expression -> Expression GREATER Expression .)
    RSHIFT_ASSIGN   reduce using rule 90 (Expression -> Expression GREATER Expression .)
    ASSIGN          reduce using rule 90 (Expression -> Expression GREATER Expression .)
    RSQUARE         reduce using rule 90 (Expression -> Expression GREATER Expression .)
    LCURL           reduce using rule 90 (Expression -> Expression GREATER Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! MOD             [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! LSHIFT          [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! RSHIFT          [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! PLUS            [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! MINUS           [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! STAR            [ reduce using rule 90 (Expression -> Expression GREATER Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 161

    (89) Expression -> Expression LESSER Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 89 (Expression -> Expression LESSER Expression .)
    LOGICAL_AND     reduce using rule 89 (Expression -> Expression LESSER Expression .)
    EQUALS          reduce using rule 89 (Expression -> Expression LESSER Expression .)
    NOT_ASSIGN      reduce using rule 89 (Expression -> Expression LESSER Expression .)
    LESSER          reduce using rule 89 (Expression -> Expression LESSER Expression .)
    GREATER         reduce using rule 89 (Expression -> Expression LESSER Expression .)
    LESS_EQUALS     reduce using rule 89 (Expression -> Expression LESSER Expression .)
    MORE_EQUALS     reduce using rule 89 (Expression -> Expression LESSER Expression .)
    OR              reduce using rule 89 (Expression -> Expression LESSER Expression .)
    XOR             reduce using rule 89 (Expression -> Expression LESSER Expression .)
    AND             reduce using rule 89 (Expression -> Expression LESSER Expression .)
    COMMA           reduce using rule 89 (Expression -> Expression LESSER Expression .)
    RPAREN          reduce using rule 89 (Expression -> Expression LESSER Expression .)
    SEMICOLON       reduce using rule 89 (Expression -> Expression LESSER Expression .)
    PLUS_ASSIGN     reduce using rule 89 (Expression -> Expression LESSER Expression .)
    MINUS_ASSIGN    reduce using rule 89 (Expression -> Expression LESSER Expression .)
    STAR_ASSIGN     reduce using rule 89 (Expression -> Expression LESSER Expression .)
    DIVIDE_ASSIGN   reduce using rule 89 (Expression -> Expression LESSER Expression .)
    MOD_ASSIGN      reduce using rule 89 (Expression -> Expression LESSER Expression .)
    AND_ASSIGN      reduce using rule 89 (Expression -> Expression LESSER Expression .)
    OR_ASSIGN       reduce using rule 89 (Expression -> Expression LESSER Expression .)
    XOR_ASSIGN      reduce using rule 89 (Expression -> Expression LESSER Expression .)
    LSHIFT_ASSIGN   reduce using rule 89 (Expression -> Expression LESSER Expression .)
    RSHIFT_ASSIGN   reduce using rule 89 (Expression -> Expression LESSER Expression .)
    ASSIGN          reduce using rule 89 (Expression -> Expression LESSER Expression .)
    RSQUARE         reduce using rule 89 (Expression -> Expression LESSER Expression .)
    LCURL           reduce using rule 89 (Expression -> Expression LESSER Expression .)
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102

  ! DIVIDE          [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! MOD             [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! LSHIFT          [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! RSHIFT          [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! PLUS            [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! MINUS           [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! STAR            [ reduce using rule 89 (Expression -> Expression LESSER Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! AND             [ shift and go to state 117 ]


state 162

    (85) Expression -> Expression LOGICAL_OR Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    COMMA           reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    RPAREN          reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    SEMICOLON       reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    PLUS_ASSIGN     reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    MINUS_ASSIGN    reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    STAR_ASSIGN     reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    DIVIDE_ASSIGN   reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    MOD_ASSIGN      reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    AND_ASSIGN      reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    OR_ASSIGN       reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    XOR_ASSIGN      reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    LSHIFT_ASSIGN   reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    RSHIFT_ASSIGN   reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    ASSIGN          reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    RSQUARE         reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    LCURL           reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .)
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117

  ! LOGICAL_AND     [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! EQUALS          [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! NOT_ASSIGN      [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! LESSER          [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! GREATER         [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! OR              [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! XOR             [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! DIVIDE          [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! MOD             [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! LSHIFT          [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! RSHIFT          [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! PLUS            [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! MINUS           [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! STAR            [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! AND             [ reduce using rule 85 (Expression -> Expression LOGICAL_OR Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]


state 163

    (93) Expression -> Expression OR Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 93 (Expression -> Expression OR Expression .)
    LOGICAL_AND     reduce using rule 93 (Expression -> Expression OR Expression .)
    OR              reduce using rule 93 (Expression -> Expression OR Expression .)
    COMMA           reduce using rule 93 (Expression -> Expression OR Expression .)
    RPAREN          reduce using rule 93 (Expression -> Expression OR Expression .)
    SEMICOLON       reduce using rule 93 (Expression -> Expression OR Expression .)
    PLUS_ASSIGN     reduce using rule 93 (Expression -> Expression OR Expression .)
    MINUS_ASSIGN    reduce using rule 93 (Expression -> Expression OR Expression .)
    STAR_ASSIGN     reduce using rule 93 (Expression -> Expression OR Expression .)
    DIVIDE_ASSIGN   reduce using rule 93 (Expression -> Expression OR Expression .)
    MOD_ASSIGN      reduce using rule 93 (Expression -> Expression OR Expression .)
    AND_ASSIGN      reduce using rule 93 (Expression -> Expression OR Expression .)
    OR_ASSIGN       reduce using rule 93 (Expression -> Expression OR Expression .)
    XOR_ASSIGN      reduce using rule 93 (Expression -> Expression OR Expression .)
    LSHIFT_ASSIGN   reduce using rule 93 (Expression -> Expression OR Expression .)
    RSHIFT_ASSIGN   reduce using rule 93 (Expression -> Expression OR Expression .)
    ASSIGN          reduce using rule 93 (Expression -> Expression OR Expression .)
    RSQUARE         reduce using rule 93 (Expression -> Expression OR Expression .)
    LCURL           reduce using rule 93 (Expression -> Expression OR Expression .)
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117

  ! EQUALS          [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! NOT_ASSIGN      [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! LESSER          [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! GREATER         [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! LESS_EQUALS     [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! MORE_EQUALS     [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! XOR             [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! DIVIDE          [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! MOD             [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! LSHIFT          [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! RSHIFT          [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! PLUS            [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! MINUS           [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! STAR            [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! AND             [ reduce using rule 93 (Expression -> Expression OR Expression .) ]
  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! OR              [ shift and go to state 121 ]


state 164

    (96) Expression -> Expression MOD Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LOGICAL_OR      reduce using rule 96 (Expression -> Expression MOD Expression .)
    LOGICAL_AND     reduce using rule 96 (Expression -> Expression MOD Expression .)
    EQUALS          reduce using rule 96 (Expression -> Expression MOD Expression .)
    NOT_ASSIGN      reduce using rule 96 (Expression -> Expression MOD Expression .)
    LESSER          reduce using rule 96 (Expression -> Expression MOD Expression .)
    GREATER         reduce using rule 96 (Expression -> Expression MOD Expression .)
    LESS_EQUALS     reduce using rule 96 (Expression -> Expression MOD Expression .)
    MORE_EQUALS     reduce using rule 96 (Expression -> Expression MOD Expression .)
    OR              reduce using rule 96 (Expression -> Expression MOD Expression .)
    XOR             reduce using rule 96 (Expression -> Expression MOD Expression .)
    DIVIDE          reduce using rule 96 (Expression -> Expression MOD Expression .)
    MOD             reduce using rule 96 (Expression -> Expression MOD Expression .)
    LSHIFT          reduce using rule 96 (Expression -> Expression MOD Expression .)
    RSHIFT          reduce using rule 96 (Expression -> Expression MOD Expression .)
    PLUS            reduce using rule 96 (Expression -> Expression MOD Expression .)
    MINUS           reduce using rule 96 (Expression -> Expression MOD Expression .)
    STAR            reduce using rule 96 (Expression -> Expression MOD Expression .)
    AND             reduce using rule 96 (Expression -> Expression MOD Expression .)
    COMMA           reduce using rule 96 (Expression -> Expression MOD Expression .)
    RPAREN          reduce using rule 96 (Expression -> Expression MOD Expression .)
    SEMICOLON       reduce using rule 96 (Expression -> Expression MOD Expression .)
    PLUS_ASSIGN     reduce using rule 96 (Expression -> Expression MOD Expression .)
    MINUS_ASSIGN    reduce using rule 96 (Expression -> Expression MOD Expression .)
    STAR_ASSIGN     reduce using rule 96 (Expression -> Expression MOD Expression .)
    DIVIDE_ASSIGN   reduce using rule 96 (Expression -> Expression MOD Expression .)
    MOD_ASSIGN      reduce using rule 96 (Expression -> Expression MOD Expression .)
    AND_ASSIGN      reduce using rule 96 (Expression -> Expression MOD Expression .)
    OR_ASSIGN       reduce using rule 96 (Expression -> Expression MOD Expression .)
    XOR_ASSIGN      reduce using rule 96 (Expression -> Expression MOD Expression .)
    LSHIFT_ASSIGN   reduce using rule 96 (Expression -> Expression MOD Expression .)
    RSHIFT_ASSIGN   reduce using rule 96 (Expression -> Expression MOD Expression .)
    ASSIGN          reduce using rule 96 (Expression -> Expression MOD Expression .)
    RSQUARE         reduce using rule 96 (Expression -> Expression MOD Expression .)
    LCURL           reduce using rule 96 (Expression -> Expression MOD Expression .)

  ! LOGICAL_OR      [ shift and go to state 120 ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! EQUALS          [ shift and go to state 116 ]
  ! NOT_ASSIGN      [ shift and go to state 111 ]
  ! LESSER          [ shift and go to state 119 ]
  ! GREATER         [ shift and go to state 118 ]
  ! LESS_EQUALS     [ shift and go to state 108 ]
  ! MORE_EQUALS     [ shift and go to state 107 ]
  ! OR              [ shift and go to state 121 ]
  ! XOR             [ shift and go to state 113 ]
  ! DIVIDE          [ shift and go to state 114 ]
  ! MOD             [ shift and go to state 122 ]
  ! LSHIFT          [ shift and go to state 104 ]
  ! RSHIFT          [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 109 ]
  ! MINUS           [ shift and go to state 106 ]
  ! STAR            [ shift and go to state 102 ]
  ! AND             [ shift and go to state 117 ]


state 165

    (83) ExpressionListTypeOpt -> empty .
    (73) Int -> empty .
    (74) Str -> empty .

    RPAREN          reduce using rule 83 (ExpressionListTypeOpt -> empty .)
    INTEGER         reduce using rule 73 (Int -> empty .)
    STRING          reduce using rule 74 (Str -> empty .)


state 166

    (82) ExpressionListTypeOpt -> ExpressionList .

    RPAREN          reduce using rule 82 (ExpressionListTypeOpt -> ExpressionList .)


state 167

    (81) Arguments -> LPAREN ExpressionListTypeOpt . RPAREN

    RPAREN          shift and go to state 186


state 168

    (78) PrimaryExpr -> PrimaryExpr LSQUARE Expression . RSQUARE
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    RSQUARE         shift and go to state 187
    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117


state 169

    (80) Selector -> DOT IDENTIFIER .

    LSQUARE         reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    DOT             reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    EQUALS          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    NOT_ASSIGN      reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LESSER          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    GREATER         reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    MORE_EQUALS     reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    OR              reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    XOR             reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    DIVIDE          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    MOD             reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LSHIFT          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    RSHIFT          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    PLUS            reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    MINUS           reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    STAR            reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    AND             reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    COMMA           reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    STAR_ASSIGN     reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    RSQUARE         reduce using rule 80 (Selector -> DOT IDENTIFIER .)
    LCURL           reduce using rule 80 (Selector -> DOT IDENTIFIER .)


state 170

    (33) ElementType -> Type .

    ASSIGN          reduce using rule 33 (ElementType -> Type .)
    SEMICOLON       reduce using rule 33 (ElementType -> Type .)
    RPAREN          reduce using rule 33 (ElementType -> Type .)
    COMMA           reduce using rule 33 (ElementType -> Type .)


state 171

    (31) ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .

    SEMICOLON       reduce using rule 31 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    COMMA           reduce using rule 31 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    RPAREN          reduce using rule 31 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    ASSIGN          reduce using rule 31 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)


state 172

    (35) FieldDeclSemiColonRep -> FieldDecl SEMICOLON . FieldDeclSemiColonRep
    (35) FieldDeclSemiColonRep -> . FieldDecl SEMICOLON FieldDeclSemiColonRep
    (36) FieldDeclSemiColonRep -> . empty
    (37) FieldDecl -> . IdentifierList Type
    (2) empty -> .
    (56) IdentifierList -> . IDENTIFIER CommaIdentRep

    RCURL           reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 29

    FieldDecl                      shift and go to state 130
    FieldDeclSemiColonRep          shift and go to state 188
    IdentifierList                 shift and go to state 132
    empty                          shift and go to state 133

state 173

    (34) StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL .

    COMMA           reduce using rule 34 (StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL .)
    RPAREN          reduce using rule 34 (StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL .)
    ASSIGN          reduce using rule 34 (StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL .)
    SEMICOLON       reduce using rule 34 (StructType -> STRUCT LCURL FieldDeclSemiColonRep RCURL .)


state 174

    (37) FieldDecl -> IdentifierList Type .

    SEMICOLON       reduce using rule 37 (FieldDecl -> IdentifierList Type .)


state 175

    (62) FunctionDecl -> FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope .

    SEMICOLON       reduce using rule 62 (FunctionDecl -> FUNC FunctionName CreateNewScope Signature FunBodyOpt DelScope .)


state 176

    (51) DelScope -> empty .

    SEMICOLON       reduce using rule 51 (DelScope -> empty .)
    RCURL           reduce using rule 51 (DelScope -> empty .)


state 177

    (52) Block -> LCURL CreateNewScope . StatementList DelScope RCURL
    (53) StatementList -> . StSemiColonRep
    (54) StSemiColonRep -> . Statement SEMICOLON StSemiColonRep
    (55) StSemiColonRep -> . empty
    (110) Statement -> . Declaration
    (111) Statement -> . SimpleStmt
    (112) Statement -> . ReturnStmt
    (113) Statement -> . BreakStmt
    (114) Statement -> . ContinueStmt
    (115) Statement -> . Block
    (116) Statement -> . IfStmt
    (117) Statement -> . SwitchStmt
    (118) Statement -> . ForStmt
    (2) empty -> .
    (14) Declaration -> . ConstDecl
    (15) Declaration -> . VarDecl
    (119) SimpleStmt -> . empty SEMICOLON
    (120) SimpleStmt -> . ExpressionStmt SEMICOLON
    (121) SimpleStmt -> . IncDecStmt SEMICOLON
    (122) SimpleStmt -> . Assignment SEMICOLON
    (157) ReturnStmt -> . RETURN ExpressionListPureOpt
    (160) BreakStmt -> . BREAK
    (161) ContinueStmt -> . CONTINUE
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL
    (138) IfStmt -> . IF Expression Block ElseOpt
    (142) SwitchStmt -> . CreateNewScope ExprSwitchStmt DelScope
    (152) ForStmt -> . CreateNewScope FOR ForClause Block DelScope
    (16) ConstDecl -> . CONST ConstSpec
    (20) VarDecl -> . VAR IdentifierList Type ASSIGN ExpressionList
    (21) VarDecl -> . VAR IdentifierList Type
    (22) VarDecl -> . VAR IdentifierList ASSIGN ExpressionList
    (123) ExpressionStmt -> . Expression
    (124) IncDecStmt -> . IDENTIFIER INCR
    (125) IncDecStmt -> . IDENTIFIER DECR
    (126) Assignment -> . ExpressionList AssignOp ExpressionList
    (50) CreateNewScope -> . empty
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (59) ExpressionList -> . Expression CommaExpRep
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    SWITCH          reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    RETURN          shift and go to state 189
    BREAK           shift and go to state 210
    CONTINUE        shift and go to state 211
    LCURL           shift and go to state 139
    IF              shift and go to state 208
    CONST           shift and go to state 15
    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 201
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77

    SwitchStmt                     shift and go to state 190
    UnaryOp                        shift and go to state 64
    ContinueStmt                   shift and go to state 191
    ExpressionStmt                 shift and go to state 193
    ForStmt                        shift and go to state 194
    Statement                      shift and go to state 195
    Operand                        shift and go to state 76
    CreateNewScope                 shift and go to state 196
    IfStmt                         shift and go to state 197
    OperandName                    shift and go to state 68
    Assignment                     shift and go to state 198
    IncDecStmt                     shift and go to state 199
    Declaration                    shift and go to state 200
    empty                          shift and go to state 202
    StSemiColonRep                 shift and go to state 203
    UnaryExpr                      shift and go to state 73
    StatementList                  shift and go to state 204
    ExpressionList                 shift and go to state 205
    SimpleStmt                     shift and go to state 192
    Str                            shift and go to state 69
    Expression                     shift and go to state 206
    Block                          shift and go to state 207
    Int                            shift and go to state 81
    BreakStmt                      shift and go to state 209
    VarDecl                        shift and go to state 23
    Literal                        shift and go to state 65
    BasicLit                       shift and go to state 70
    PrimaryExpr                    shift and go to state 82
    ReturnStmt                     shift and go to state 212
    ConstDecl                      shift and go to state 24

state 178

    (43) Result -> LPAREN TypeList RPAREN .

    ASSIGN          reduce using rule 43 (Result -> LPAREN TypeList RPAREN .)
    SEMICOLON       reduce using rule 43 (Result -> LPAREN TypeList RPAREN .)
    RPAREN          reduce using rule 43 (Result -> LPAREN TypeList RPAREN .)
    COMMA           reduce using rule 43 (Result -> LPAREN TypeList RPAREN .)
    LCURL           reduce using rule 43 (Result -> LPAREN TypeList RPAREN .)


state 179

    (150) TypeRep -> COMMA . Type TypeRep
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    Type                           shift and go to state 213
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 180

    (151) TypeRep -> empty .

    RPAREN          reduce using rule 151 (TypeRep -> empty .)


state 181

    (149) TypeList -> Type TypeRep .

    RPAREN          reduce using rule 149 (TypeList -> Type TypeRep .)


state 182

    (47) ParameterList -> IdentifierList Type CommaParamDeclRep .

    RPAREN          reduce using rule 47 (ParameterList -> IdentifierList Type CommaParamDeclRep .)


state 183

    (48) CommaParamDeclRep -> COMMA . IdentifierList Type CommaParamDeclRep
    (56) IdentifierList -> . IDENTIFIER CommaIdentRep

    IDENTIFIER      shift and go to state 29

    IdentifierList                 shift and go to state 214

state 184

    (49) CommaParamDeclRep -> empty .

    RPAREN          reduce using rule 49 (CommaParamDeclRep -> empty .)


state 185

    (60) CommaExpRep -> COMMA Expression CommaExpRep .

    SEMICOLON       reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    RPAREN          reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    PLUS_ASSIGN     reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    MINUS_ASSIGN    reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    STAR_ASSIGN     reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    DIVIDE_ASSIGN   reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    MOD_ASSIGN      reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    AND_ASSIGN      reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    OR_ASSIGN       reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    XOR_ASSIGN      reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    LSHIFT_ASSIGN   reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    RSHIFT_ASSIGN   reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)
    ASSIGN          reduce using rule 60 (CommaExpRep -> COMMA Expression CommaExpRep .)


state 186

    (81) Arguments -> LPAREN ExpressionListTypeOpt RPAREN .

    LSQUARE         reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    DOT             reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LPAREN          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LOGICAL_OR      reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LOGICAL_AND     reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    EQUALS          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    NOT_ASSIGN      reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LESSER          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    GREATER         reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LESS_EQUALS     reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MORE_EQUALS     reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    OR              reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    XOR             reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    DIVIDE          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MOD             reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LSHIFT          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    RSHIFT          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    PLUS            reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MINUS           reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    STAR            reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    AND             reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    COMMA           reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    SEMICOLON       reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    RPAREN          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    PLUS_ASSIGN     reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MINUS_ASSIGN    reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    STAR_ASSIGN     reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MOD_ASSIGN      reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    AND_ASSIGN      reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    OR_ASSIGN       reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    XOR_ASSIGN      reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    ASSIGN          reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    RSQUARE         reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LCURL           reduce using rule 81 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)


state 187

    (78) PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .

    LSQUARE         reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    DOT             reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LPAREN          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LOGICAL_OR      reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LOGICAL_AND     reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    EQUALS          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    NOT_ASSIGN      reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LESSER          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    GREATER         reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LESS_EQUALS     reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    MORE_EQUALS     reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    OR              reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    XOR             reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    DIVIDE          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    MOD             reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LSHIFT          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    RSHIFT          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    PLUS            reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    MINUS           reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    STAR            reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    AND             reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    COMMA           reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    SEMICOLON       reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    RPAREN          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    PLUS_ASSIGN     reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    MINUS_ASSIGN    reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    STAR_ASSIGN     reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    DIVIDE_ASSIGN   reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    MOD_ASSIGN      reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    AND_ASSIGN      reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    OR_ASSIGN       reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    XOR_ASSIGN      reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LSHIFT_ASSIGN   reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    RSHIFT_ASSIGN   reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    ASSIGN          reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    RSQUARE         reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)
    LCURL           reduce using rule 78 (PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE .)


state 188

    (35) FieldDeclSemiColonRep -> FieldDecl SEMICOLON FieldDeclSemiColonRep .

    RCURL           reduce using rule 35 (FieldDeclSemiColonRep -> FieldDecl SEMICOLON FieldDeclSemiColonRep .)


state 189

    (157) ReturnStmt -> RETURN . ExpressionListPureOpt
    (158) ExpressionListPureOpt -> . ExpressionList
    (159) ExpressionListPureOpt -> . empty
    (59) ExpressionList -> . Expression CommaExpRep
    (2) empty -> .
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    ExpressionListPureOpt          shift and go to state 215
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 217
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 78
    empty                          shift and go to state 216

state 190

    (117) Statement -> SwitchStmt .

    SEMICOLON       reduce using rule 117 (Statement -> SwitchStmt .)


state 191

    (114) Statement -> ContinueStmt .

    SEMICOLON       reduce using rule 114 (Statement -> ContinueStmt .)


state 192

    (111) Statement -> SimpleStmt .

    SEMICOLON       reduce using rule 111 (Statement -> SimpleStmt .)


state 193

    (120) SimpleStmt -> ExpressionStmt . SEMICOLON

    SEMICOLON       shift and go to state 218


state 194

    (118) Statement -> ForStmt .

    SEMICOLON       reduce using rule 118 (Statement -> ForStmt .)


state 195

    (54) StSemiColonRep -> Statement . SEMICOLON StSemiColonRep

    SEMICOLON       shift and go to state 219


state 196

    (142) SwitchStmt -> CreateNewScope . ExprSwitchStmt DelScope
    (152) ForStmt -> CreateNewScope . FOR ForClause Block DelScope
    (143) ExprSwitchStmt -> . SWITCH Expression LCURL ExprCaseClauseRep RCURL

    FOR             shift and go to state 220
    SWITCH          shift and go to state 221

    ExprSwitchStmt                 shift and go to state 222

state 197

    (116) Statement -> IfStmt .

    SEMICOLON       reduce using rule 116 (Statement -> IfStmt .)


state 198

    (122) SimpleStmt -> Assignment . SEMICOLON

    SEMICOLON       shift and go to state 223


state 199

    (121) SimpleStmt -> IncDecStmt . SEMICOLON

    SEMICOLON       shift and go to state 224


state 200

    (110) Statement -> Declaration .

    SEMICOLON       reduce using rule 110 (Statement -> Declaration .)


state 201

    (124) IncDecStmt -> IDENTIFIER . INCR
    (125) IncDecStmt -> IDENTIFIER . DECR
    (75) OperandName -> IDENTIFIER .

    INCR            shift and go to state 225
    DECR            shift and go to state 226
    LSQUARE         reduce using rule 75 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 75 (OperandName -> IDENTIFIER .)
    LPAREN          reduce using rule 75 (OperandName -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 75 (OperandName -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 75 (OperandName -> IDENTIFIER .)
    EQUALS          reduce using rule 75 (OperandName -> IDENTIFIER .)
    NOT_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    LESSER          reduce using rule 75 (OperandName -> IDENTIFIER .)
    GREATER         reduce using rule 75 (OperandName -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 75 (OperandName -> IDENTIFIER .)
    MORE_EQUALS     reduce using rule 75 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 75 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 75 (OperandName -> IDENTIFIER .)
    DIVIDE          reduce using rule 75 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 75 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 75 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 75 (OperandName -> IDENTIFIER .)
    PLUS            reduce using rule 75 (OperandName -> IDENTIFIER .)
    MINUS           reduce using rule 75 (OperandName -> IDENTIFIER .)
    STAR            reduce using rule 75 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 75 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 75 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 75 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 75 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 75 (OperandName -> IDENTIFIER .)
    STAR_ASSIGN     reduce using rule 75 (OperandName -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 75 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 75 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 75 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 75 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 75 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 75 (OperandName -> IDENTIFIER .)


state 202

    (55) StSemiColonRep -> empty .
    (119) SimpleStmt -> empty . SEMICOLON
    (50) CreateNewScope -> empty .
    (73) Int -> empty .
    (74) Str -> empty .

    RCURL           reduce using rule 55 (StSemiColonRep -> empty .)
    CASE            reduce using rule 55 (StSemiColonRep -> empty .)
    DEFAULT         reduce using rule 55 (StSemiColonRep -> empty .)
    SEMICOLON       shift and go to state 227
    FOR             reduce using rule 50 (CreateNewScope -> empty .)
    SWITCH          reduce using rule 50 (CreateNewScope -> empty .)
    INTEGER         reduce using rule 73 (Int -> empty .)
    STRING          reduce using rule 74 (Str -> empty .)


state 203

    (53) StatementList -> StSemiColonRep .

    CASE            reduce using rule 53 (StatementList -> StSemiColonRep .)
    DEFAULT         reduce using rule 53 (StatementList -> StSemiColonRep .)
    RCURL           reduce using rule 53 (StatementList -> StSemiColonRep .)


state 204

    (52) Block -> LCURL CreateNewScope StatementList . DelScope RCURL
    (51) DelScope -> . empty
    (2) empty -> .

    RCURL           reduce using rule 2 (empty -> .)

    DelScope                       shift and go to state 228
    empty                          shift and go to state 176

state 205

    (126) Assignment -> ExpressionList . AssignOp ExpressionList
    (127) AssignOp -> . PLUS_ASSIGN
    (128) AssignOp -> . MINUS_ASSIGN
    (129) AssignOp -> . STAR_ASSIGN
    (130) AssignOp -> . DIVIDE_ASSIGN
    (131) AssignOp -> . MOD_ASSIGN
    (132) AssignOp -> . AND_ASSIGN
    (133) AssignOp -> . OR_ASSIGN
    (134) AssignOp -> . XOR_ASSIGN
    (135) AssignOp -> . LSHIFT_ASSIGN
    (136) AssignOp -> . RSHIFT_ASSIGN
    (137) AssignOp -> . ASSIGN

    PLUS_ASSIGN     shift and go to state 239
    MINUS_ASSIGN    shift and go to state 232
    STAR_ASSIGN     shift and go to state 231
    DIVIDE_ASSIGN   shift and go to state 238
    MOD_ASSIGN      shift and go to state 235
    AND_ASSIGN      shift and go to state 237
    OR_ASSIGN       shift and go to state 234
    XOR_ASSIGN      shift and go to state 233
    LSHIFT_ASSIGN   shift and go to state 236
    RSHIFT_ASSIGN   shift and go to state 230
    ASSIGN          shift and go to state 240

    AssignOp                       shift and go to state 229

state 206

    (123) ExpressionStmt -> Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression
    (59) ExpressionList -> Expression . CommaExpRep
    (60) CommaExpRep -> . COMMA Expression CommaExpRep
    (61) CommaExpRep -> . empty
    (2) empty -> .

    SEMICOLON       reduce using rule 123 (ExpressionStmt -> Expression .)
    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117
    COMMA           shift and go to state 110
    PLUS_ASSIGN     reduce using rule 2 (empty -> .)
    MINUS_ASSIGN    reduce using rule 2 (empty -> .)
    STAR_ASSIGN     reduce using rule 2 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 2 (empty -> .)
    MOD_ASSIGN      reduce using rule 2 (empty -> .)
    AND_ASSIGN      reduce using rule 2 (empty -> .)
    OR_ASSIGN       reduce using rule 2 (empty -> .)
    XOR_ASSIGN      reduce using rule 2 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 2 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)

    CommaExpRep                    shift and go to state 115
    empty                          shift and go to state 112

state 207

    (115) Statement -> Block .

    SEMICOLON       reduce using rule 115 (Statement -> Block .)


state 208

    (138) IfStmt -> IF . Expression Block ElseOpt
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    empty                          shift and go to state 72
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 241

state 209

    (113) Statement -> BreakStmt .

    SEMICOLON       reduce using rule 113 (Statement -> BreakStmt .)


state 210

    (160) BreakStmt -> BREAK .

    SEMICOLON       reduce using rule 160 (BreakStmt -> BREAK .)


state 211

    (161) ContinueStmt -> CONTINUE .

    SEMICOLON       reduce using rule 161 (ContinueStmt -> CONTINUE .)


state 212

    (112) Statement -> ReturnStmt .

    SEMICOLON       reduce using rule 112 (Statement -> ReturnStmt .)


state 213

    (150) TypeRep -> COMMA Type . TypeRep
    (150) TypeRep -> . COMMA Type TypeRep
    (151) TypeRep -> . empty
    (2) empty -> .

    COMMA           shift and go to state 179
    RPAREN          reduce using rule 2 (empty -> .)

    empty                          shift and go to state 180
    TypeRep                        shift and go to state 242

state 214

    (48) CommaParamDeclRep -> COMMA IdentifierList . Type CommaParamDeclRep
    (23) Type -> . TypeName
    (24) Type -> . TypeLit
    (25) Type -> . LPAREN Type RPAREN
    (26) TypeName -> . IDENTIFIER
    (27) TypeLit -> . ArrayType
    (28) TypeLit -> . StructType
    (29) TypeLit -> . PointerType
    (30) TypeLit -> . FunctionType
    (31) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (34) StructType -> . STRUCT LCURL FieldDeclSemiColonRep RCURL
    (38) PointerType -> . STAR BaseType
    (40) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 37
    IDENTIFIER      shift and go to state 42
    LSQUARE         shift and go to state 45
    STRUCT          shift and go to state 46
    STAR            shift and go to state 36
    FUNC            shift and go to state 35

    StructType                     shift and go to state 44
    Type                           shift and go to state 243
    ArrayType                      shift and go to state 38
    TypeName                       shift and go to state 41
    PointerType                    shift and go to state 47
    FunctionType                   shift and go to state 48
    TypeLit                        shift and go to state 39

state 215

    (157) ReturnStmt -> RETURN ExpressionListPureOpt .

    SEMICOLON       reduce using rule 157 (ReturnStmt -> RETURN ExpressionListPureOpt .)


state 216

    (159) ExpressionListPureOpt -> empty .
    (73) Int -> empty .
    (74) Str -> empty .

    SEMICOLON       reduce using rule 159 (ExpressionListPureOpt -> empty .)
    INTEGER         reduce using rule 73 (Int -> empty .)
    STRING          reduce using rule 74 (Str -> empty .)


state 217

    (158) ExpressionListPureOpt -> ExpressionList .

    SEMICOLON       reduce using rule 158 (ExpressionListPureOpt -> ExpressionList .)


state 218

    (120) SimpleStmt -> ExpressionStmt SEMICOLON .

    SEMICOLON       reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    LCURL           reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    NOT             reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    PLUS            reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    MINUS           reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    STAR            reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    AND             reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    LPAREN          reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    IDENTIFIER      reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    INTEGER         reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)
    STRING          reduce using rule 120 (SimpleStmt -> ExpressionStmt SEMICOLON .)


state 219

    (54) StSemiColonRep -> Statement SEMICOLON . StSemiColonRep
    (54) StSemiColonRep -> . Statement SEMICOLON StSemiColonRep
    (55) StSemiColonRep -> . empty
    (110) Statement -> . Declaration
    (111) Statement -> . SimpleStmt
    (112) Statement -> . ReturnStmt
    (113) Statement -> . BreakStmt
    (114) Statement -> . ContinueStmt
    (115) Statement -> . Block
    (116) Statement -> . IfStmt
    (117) Statement -> . SwitchStmt
    (118) Statement -> . ForStmt
    (2) empty -> .
    (14) Declaration -> . ConstDecl
    (15) Declaration -> . VarDecl
    (119) SimpleStmt -> . empty SEMICOLON
    (120) SimpleStmt -> . ExpressionStmt SEMICOLON
    (121) SimpleStmt -> . IncDecStmt SEMICOLON
    (122) SimpleStmt -> . Assignment SEMICOLON
    (157) ReturnStmt -> . RETURN ExpressionListPureOpt
    (160) BreakStmt -> . BREAK
    (161) ContinueStmt -> . CONTINUE
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL
    (138) IfStmt -> . IF Expression Block ElseOpt
    (142) SwitchStmt -> . CreateNewScope ExprSwitchStmt DelScope
    (152) ForStmt -> . CreateNewScope FOR ForClause Block DelScope
    (16) ConstDecl -> . CONST ConstSpec
    (20) VarDecl -> . VAR IdentifierList Type ASSIGN ExpressionList
    (21) VarDecl -> . VAR IdentifierList Type
    (22) VarDecl -> . VAR IdentifierList ASSIGN ExpressionList
    (123) ExpressionStmt -> . Expression
    (124) IncDecStmt -> . IDENTIFIER INCR
    (125) IncDecStmt -> . IDENTIFIER DECR
    (126) Assignment -> . ExpressionList AssignOp ExpressionList
    (50) CreateNewScope -> . empty
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (59) ExpressionList -> . Expression CommaExpRep
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    CASE            reduce using rule 2 (empty -> .)
    DEFAULT         reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    SWITCH          reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    RETURN          shift and go to state 189
    BREAK           shift and go to state 210
    CONTINUE        shift and go to state 211
    LCURL           shift and go to state 139
    IF              shift and go to state 208
    CONST           shift and go to state 15
    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 201
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77

    UnaryOp                        shift and go to state 64
    ContinueStmt                   shift and go to state 191
    ExpressionStmt                 shift and go to state 193
    ForStmt                        shift and go to state 194
    Statement                      shift and go to state 195
    Operand                        shift and go to state 76
    CreateNewScope                 shift and go to state 196
    IfStmt                         shift and go to state 197
    OperandName                    shift and go to state 68
    Assignment                     shift and go to state 198
    IncDecStmt                     shift and go to state 199
    Declaration                    shift and go to state 200
    empty                          shift and go to state 202
    StSemiColonRep                 shift and go to state 244
    UnaryExpr                      shift and go to state 73
    ExpressionList                 shift and go to state 205
    SimpleStmt                     shift and go to state 192
    Str                            shift and go to state 69
    Expression                     shift and go to state 206
    Block                          shift and go to state 207
    Int                            shift and go to state 81
    BreakStmt                      shift and go to state 209
    SwitchStmt                     shift and go to state 190
    Literal                        shift and go to state 65
    VarDecl                        shift and go to state 23
    BasicLit                       shift and go to state 70
    PrimaryExpr                    shift and go to state 82
    ReturnStmt                     shift and go to state 212
    ConstDecl                      shift and go to state 24

state 220

    (152) ForStmt -> CreateNewScope FOR . ForClause Block DelScope
    (153) ForClause -> . SimpleStmt ConditionOpt SEMICOLON SimpleStmt
    (119) SimpleStmt -> . empty SEMICOLON
    (120) SimpleStmt -> . ExpressionStmt SEMICOLON
    (121) SimpleStmt -> . IncDecStmt SEMICOLON
    (122) SimpleStmt -> . Assignment SEMICOLON
    (2) empty -> .
    (123) ExpressionStmt -> . Expression
    (124) IncDecStmt -> . IDENTIFIER INCR
    (125) IncDecStmt -> . IDENTIFIER DECR
    (126) Assignment -> . ExpressionList AssignOp ExpressionList
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (59) ExpressionList -> . Expression CommaExpRep
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 201
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77

    UnaryOp                        shift and go to state 64
    PrimaryExpr                    shift and go to state 82
    SimpleStmt                     shift and go to state 245
    ExpressionStmt                 shift and go to state 193
    OperandName                    shift and go to state 68
    Assignment                     shift and go to state 198
    IncDecStmt                     shift and go to state 199
    empty                          shift and go to state 246
    UnaryExpr                      shift and go to state 73
    ExpressionList                 shift and go to state 205
    Str                            shift and go to state 69
    ForClause                      shift and go to state 247
    Expression                     shift and go to state 206
    Int                            shift and go to state 81
    Literal                        shift and go to state 65
    BasicLit                       shift and go to state 70
    Operand                        shift and go to state 76

state 221

    (143) ExprSwitchStmt -> SWITCH . Expression LCURL ExprCaseClauseRep RCURL
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Literal                        shift and go to state 65
    Expression                     shift and go to state 248
    empty                          shift and go to state 72

state 222

    (142) SwitchStmt -> CreateNewScope ExprSwitchStmt . DelScope
    (51) DelScope -> . empty
    (2) empty -> .

    SEMICOLON       reduce using rule 2 (empty -> .)

    DelScope                       shift and go to state 249
    empty                          shift and go to state 176

state 223

    (122) SimpleStmt -> Assignment SEMICOLON .

    SEMICOLON       reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    LCURL           reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    NOT             reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    PLUS            reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    MINUS           reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    STAR            reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    AND             reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    LPAREN          reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    INTEGER         reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)
    STRING          reduce using rule 122 (SimpleStmt -> Assignment SEMICOLON .)


state 224

    (121) SimpleStmt -> IncDecStmt SEMICOLON .

    SEMICOLON       reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    LCURL           reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    NOT             reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    PLUS            reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    MINUS           reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    STAR            reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    AND             reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    LPAREN          reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    IDENTIFIER      reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    INTEGER         reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)
    STRING          reduce using rule 121 (SimpleStmt -> IncDecStmt SEMICOLON .)


state 225

    (124) IncDecStmt -> IDENTIFIER INCR .

    SEMICOLON       reduce using rule 124 (IncDecStmt -> IDENTIFIER INCR .)


state 226

    (125) IncDecStmt -> IDENTIFIER DECR .

    SEMICOLON       reduce using rule 125 (IncDecStmt -> IDENTIFIER DECR .)


state 227

    (119) SimpleStmt -> empty SEMICOLON .

    SEMICOLON       reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    LCURL           reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    NOT             reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    PLUS            reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    MINUS           reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    STAR            reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    AND             reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    LPAREN          reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    IDENTIFIER      reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    INTEGER         reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)
    STRING          reduce using rule 119 (SimpleStmt -> empty SEMICOLON .)


state 228

    (52) Block -> LCURL CreateNewScope StatementList DelScope . RCURL

    RCURL           shift and go to state 250


state 229

    (126) Assignment -> ExpressionList AssignOp . ExpressionList
    (59) ExpressionList -> . Expression CommaExpRep
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    Literal                        shift and go to state 65
    ExpressionList                 shift and go to state 251
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Expression                     shift and go to state 78
    empty                          shift and go to state 72

state 230

    (136) AssignOp -> RSHIFT_ASSIGN .

    NOT             reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    STAR            reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    AND             reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    INTEGER         reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)
    STRING          reduce using rule 136 (AssignOp -> RSHIFT_ASSIGN .)


state 231

    (129) AssignOp -> STAR_ASSIGN .

    NOT             reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    PLUS            reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    MINUS           reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    STAR            reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    AND             reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    LPAREN          reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    IDENTIFIER      reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    INTEGER         reduce using rule 129 (AssignOp -> STAR_ASSIGN .)
    STRING          reduce using rule 129 (AssignOp -> STAR_ASSIGN .)


state 232

    (128) AssignOp -> MINUS_ASSIGN .

    NOT             reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    PLUS            reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    MINUS           reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    STAR            reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    AND             reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    INTEGER         reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)
    STRING          reduce using rule 128 (AssignOp -> MINUS_ASSIGN .)


state 233

    (134) AssignOp -> XOR_ASSIGN .

    NOT             reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    PLUS            reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    MINUS           reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    STAR            reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    AND             reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    LPAREN          reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    INTEGER         reduce using rule 134 (AssignOp -> XOR_ASSIGN .)
    STRING          reduce using rule 134 (AssignOp -> XOR_ASSIGN .)


state 234

    (133) AssignOp -> OR_ASSIGN .

    NOT             reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    PLUS            reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    MINUS           reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    STAR            reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    AND             reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    LPAREN          reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    INTEGER         reduce using rule 133 (AssignOp -> OR_ASSIGN .)
    STRING          reduce using rule 133 (AssignOp -> OR_ASSIGN .)


state 235

    (131) AssignOp -> MOD_ASSIGN .

    NOT             reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    PLUS            reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    MINUS           reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    STAR            reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    AND             reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    LPAREN          reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    INTEGER         reduce using rule 131 (AssignOp -> MOD_ASSIGN .)
    STRING          reduce using rule 131 (AssignOp -> MOD_ASSIGN .)


state 236

    (135) AssignOp -> LSHIFT_ASSIGN .

    NOT             reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    STAR            reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    AND             reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    INTEGER         reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)
    STRING          reduce using rule 135 (AssignOp -> LSHIFT_ASSIGN .)


state 237

    (132) AssignOp -> AND_ASSIGN .

    NOT             reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    PLUS            reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    MINUS           reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    STAR            reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    AND             reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    LPAREN          reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    INTEGER         reduce using rule 132 (AssignOp -> AND_ASSIGN .)
    STRING          reduce using rule 132 (AssignOp -> AND_ASSIGN .)


state 238

    (130) AssignOp -> DIVIDE_ASSIGN .

    NOT             reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    STAR            reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    AND             reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    IDENTIFIER      reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    INTEGER         reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 130 (AssignOp -> DIVIDE_ASSIGN .)


state 239

    (127) AssignOp -> PLUS_ASSIGN .

    NOT             reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    PLUS            reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    MINUS           reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    STAR            reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    AND             reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    INTEGER         reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)
    STRING          reduce using rule 127 (AssignOp -> PLUS_ASSIGN .)


state 240

    (137) AssignOp -> ASSIGN .

    NOT             reduce using rule 137 (AssignOp -> ASSIGN .)
    PLUS            reduce using rule 137 (AssignOp -> ASSIGN .)
    MINUS           reduce using rule 137 (AssignOp -> ASSIGN .)
    STAR            reduce using rule 137 (AssignOp -> ASSIGN .)
    AND             reduce using rule 137 (AssignOp -> ASSIGN .)
    LPAREN          reduce using rule 137 (AssignOp -> ASSIGN .)
    IDENTIFIER      reduce using rule 137 (AssignOp -> ASSIGN .)
    INTEGER         reduce using rule 137 (AssignOp -> ASSIGN .)
    STRING          reduce using rule 137 (AssignOp -> ASSIGN .)


state 241

    (138) IfStmt -> IF Expression . Block ElseOpt
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL

    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117
    LCURL           shift and go to state 139

    Block                          shift and go to state 252

state 242

    (150) TypeRep -> COMMA Type TypeRep .

    RPAREN          reduce using rule 150 (TypeRep -> COMMA Type TypeRep .)


state 243

    (48) CommaParamDeclRep -> COMMA IdentifierList Type . CommaParamDeclRep
    (48) CommaParamDeclRep -> . COMMA IdentifierList Type CommaParamDeclRep
    (49) CommaParamDeclRep -> . empty
    (2) empty -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 2 (empty -> .)

    CommaParamDeclRep              shift and go to state 253
    empty                          shift and go to state 184

state 244

    (54) StSemiColonRep -> Statement SEMICOLON StSemiColonRep .

    RCURL           reduce using rule 54 (StSemiColonRep -> Statement SEMICOLON StSemiColonRep .)
    CASE            reduce using rule 54 (StSemiColonRep -> Statement SEMICOLON StSemiColonRep .)
    DEFAULT         reduce using rule 54 (StSemiColonRep -> Statement SEMICOLON StSemiColonRep .)


state 245

    (153) ForClause -> SimpleStmt . ConditionOpt SEMICOLON SimpleStmt
    (154) ConditionOpt -> . empty
    (155) ConditionOpt -> . Condition
    (2) empty -> .
    (156) Condition -> . Expression
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77
    IDENTIFIER      shift and go to state 80

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    BasicLit                       shift and go to state 70
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    ConditionOpt                   shift and go to state 255
    empty                          shift and go to state 257
    Str                            shift and go to state 69
    PrimaryExpr                    shift and go to state 82
    Literal                        shift and go to state 65
    Expression                     shift and go to state 256
    Condition                      shift and go to state 254

state 246

    (119) SimpleStmt -> empty . SEMICOLON
    (73) Int -> empty .
    (74) Str -> empty .

    SEMICOLON       shift and go to state 227
    INTEGER         reduce using rule 73 (Int -> empty .)
    STRING          reduce using rule 74 (Str -> empty .)


state 247

    (152) ForStmt -> CreateNewScope FOR ForClause . Block DelScope
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL

    LCURL           shift and go to state 139

    Block                          shift and go to state 258

state 248

    (143) ExprSwitchStmt -> SWITCH Expression . LCURL ExprCaseClauseRep RCURL
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    LCURL           shift and go to state 259
    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117


state 249

    (142) SwitchStmt -> CreateNewScope ExprSwitchStmt DelScope .

    SEMICOLON       reduce using rule 142 (SwitchStmt -> CreateNewScope ExprSwitchStmt DelScope .)


state 250

    (52) Block -> LCURL CreateNewScope StatementList DelScope RCURL .

    SEMICOLON       reduce using rule 52 (Block -> LCURL CreateNewScope StatementList DelScope RCURL .)
    ELSE            reduce using rule 52 (Block -> LCURL CreateNewScope StatementList DelScope RCURL .)


state 251

    (126) Assignment -> ExpressionList AssignOp ExpressionList .

    SEMICOLON       reduce using rule 126 (Assignment -> ExpressionList AssignOp ExpressionList .)


state 252

    (138) IfStmt -> IF Expression Block . ElseOpt
    (139) ElseOpt -> . ELSE IfStmt
    (140) ElseOpt -> . ELSE Block
    (141) ElseOpt -> . empty
    (2) empty -> .

    ELSE            shift and go to state 260
    SEMICOLON       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 261
    ElseOpt                        shift and go to state 262

state 253

    (48) CommaParamDeclRep -> COMMA IdentifierList Type CommaParamDeclRep .

    RPAREN          reduce using rule 48 (CommaParamDeclRep -> COMMA IdentifierList Type CommaParamDeclRep .)


state 254

    (155) ConditionOpt -> Condition .

    SEMICOLON       reduce using rule 155 (ConditionOpt -> Condition .)


state 255

    (153) ForClause -> SimpleStmt ConditionOpt . SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 263


state 256

    (156) Condition -> Expression .
    (85) Expression -> Expression . LOGICAL_OR Expression
    (86) Expression -> Expression . LOGICAL_AND Expression
    (87) Expression -> Expression . EQUALS Expression
    (88) Expression -> Expression . NOT_ASSIGN Expression
    (89) Expression -> Expression . LESSER Expression
    (90) Expression -> Expression . GREATER Expression
    (91) Expression -> Expression . LESS_EQUALS Expression
    (92) Expression -> Expression . MORE_EQUALS Expression
    (93) Expression -> Expression . OR Expression
    (94) Expression -> Expression . XOR Expression
    (95) Expression -> Expression . DIVIDE Expression
    (96) Expression -> Expression . MOD Expression
    (97) Expression -> Expression . LSHIFT Expression
    (98) Expression -> Expression . RSHIFT Expression
    (99) Expression -> Expression . PLUS Expression
    (100) Expression -> Expression . MINUS Expression
    (101) Expression -> Expression . STAR Expression
    (102) Expression -> Expression . AND Expression

    SEMICOLON       reduce using rule 156 (Condition -> Expression .)
    LOGICAL_OR      shift and go to state 120
    LOGICAL_AND     shift and go to state 103
    EQUALS          shift and go to state 116
    NOT_ASSIGN      shift and go to state 111
    LESSER          shift and go to state 119
    GREATER         shift and go to state 118
    LESS_EQUALS     shift and go to state 108
    MORE_EQUALS     shift and go to state 107
    OR              shift and go to state 121
    XOR             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 122
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    PLUS            shift and go to state 109
    MINUS           shift and go to state 106
    STAR            shift and go to state 102
    AND             shift and go to state 117


state 257

    (154) ConditionOpt -> empty .
    (73) Int -> empty .
    (74) Str -> empty .

    SEMICOLON       reduce using rule 154 (ConditionOpt -> empty .)
    INTEGER         reduce using rule 73 (Int -> empty .)
    STRING          reduce using rule 74 (Str -> empty .)


state 258

    (152) ForStmt -> CreateNewScope FOR ForClause Block . DelScope
    (51) DelScope -> . empty
    (2) empty -> .

    SEMICOLON       reduce using rule 2 (empty -> .)

    DelScope                       shift and go to state 264
    empty                          shift and go to state 176

state 259

    (143) ExprSwitchStmt -> SWITCH Expression LCURL . ExprCaseClauseRep RCURL
    (144) ExprCaseClauseRep -> . ExprCaseClause ExprCaseClauseRep
    (145) ExprCaseClauseRep -> . empty
    (146) ExprCaseClause -> . ExprSwitchCase COLON StatementList
    (2) empty -> .
    (147) ExprSwitchCase -> . CASE BasicLit
    (148) ExprSwitchCase -> . DEFAULT

    RCURL           reduce using rule 2 (empty -> .)
    CASE            shift and go to state 265
    DEFAULT         shift and go to state 268

    ExprSwitchCase                 shift and go to state 267
    ExprCaseClauseRep              shift and go to state 266
    ExprCaseClause                 shift and go to state 269
    empty                          shift and go to state 270

state 260

    (139) ElseOpt -> ELSE . IfStmt
    (140) ElseOpt -> ELSE . Block
    (138) IfStmt -> . IF Expression Block ElseOpt
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL

    IF              shift and go to state 208
    LCURL           shift and go to state 139

    IfStmt                         shift and go to state 271
    Block                          shift and go to state 272

state 261

    (141) ElseOpt -> empty .

    SEMICOLON       reduce using rule 141 (ElseOpt -> empty .)


state 262

    (138) IfStmt -> IF Expression Block ElseOpt .

    SEMICOLON       reduce using rule 138 (IfStmt -> IF Expression Block ElseOpt .)


state 263

    (153) ForClause -> SimpleStmt ConditionOpt SEMICOLON . SimpleStmt
    (119) SimpleStmt -> . empty SEMICOLON
    (120) SimpleStmt -> . ExpressionStmt SEMICOLON
    (121) SimpleStmt -> . IncDecStmt SEMICOLON
    (122) SimpleStmt -> . Assignment SEMICOLON
    (2) empty -> .
    (123) ExpressionStmt -> . Expression
    (124) IncDecStmt -> . IDENTIFIER INCR
    (125) IncDecStmt -> . IDENTIFIER DECR
    (126) Assignment -> . ExpressionList AssignOp ExpressionList
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (59) ExpressionList -> . Expression CommaExpRep
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IDENTIFIER      shift and go to state 201
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77

    OperandName                    shift and go to state 68
    UnaryOp                        shift and go to state 64
    Int                            shift and go to state 81
    Assignment                     shift and go to state 198
    ExpressionStmt                 shift and go to state 193
    SimpleStmt                     shift and go to state 273
    UnaryExpr                      shift and go to state 73
    Operand                        shift and go to state 76
    IncDecStmt                     shift and go to state 199
    Str                            shift and go to state 69
    BasicLit                       shift and go to state 70
    PrimaryExpr                    shift and go to state 82
    ExpressionList                 shift and go to state 205
    Literal                        shift and go to state 65
    Expression                     shift and go to state 206
    empty                          shift and go to state 246

state 264

    (152) ForStmt -> CreateNewScope FOR ForClause Block DelScope .

    SEMICOLON       reduce using rule 152 (ForStmt -> CreateNewScope FOR ForClause Block DelScope .)


state 265

    (147) ExprSwitchCase -> CASE . BasicLit
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty
    (2) empty -> .

    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)

    Int                            shift and go to state 81
    BasicLit                       shift and go to state 274
    empty                          shift and go to state 72
    Str                            shift and go to state 69

state 266

    (143) ExprSwitchStmt -> SWITCH Expression LCURL ExprCaseClauseRep . RCURL

    RCURL           shift and go to state 275


state 267

    (146) ExprCaseClause -> ExprSwitchCase . COLON StatementList

    COLON           shift and go to state 276


state 268

    (148) ExprSwitchCase -> DEFAULT .

    COLON           reduce using rule 148 (ExprSwitchCase -> DEFAULT .)


state 269

    (144) ExprCaseClauseRep -> ExprCaseClause . ExprCaseClauseRep
    (144) ExprCaseClauseRep -> . ExprCaseClause ExprCaseClauseRep
    (145) ExprCaseClauseRep -> . empty
    (146) ExprCaseClause -> . ExprSwitchCase COLON StatementList
    (2) empty -> .
    (147) ExprSwitchCase -> . CASE BasicLit
    (148) ExprSwitchCase -> . DEFAULT

    RCURL           reduce using rule 2 (empty -> .)
    CASE            shift and go to state 265
    DEFAULT         shift and go to state 268

    ExprSwitchCase                 shift and go to state 267
    ExprCaseClauseRep              shift and go to state 277
    ExprCaseClause                 shift and go to state 269
    empty                          shift and go to state 270

state 270

    (145) ExprCaseClauseRep -> empty .

    RCURL           reduce using rule 145 (ExprCaseClauseRep -> empty .)


state 271

    (139) ElseOpt -> ELSE IfStmt .

    SEMICOLON       reduce using rule 139 (ElseOpt -> ELSE IfStmt .)


state 272

    (140) ElseOpt -> ELSE Block .

    SEMICOLON       reduce using rule 140 (ElseOpt -> ELSE Block .)


state 273

    (153) ForClause -> SimpleStmt ConditionOpt SEMICOLON SimpleStmt .

    LCURL           reduce using rule 153 (ForClause -> SimpleStmt ConditionOpt SEMICOLON SimpleStmt .)


state 274

    (147) ExprSwitchCase -> CASE BasicLit .

    COLON           reduce using rule 147 (ExprSwitchCase -> CASE BasicLit .)


state 275

    (143) ExprSwitchStmt -> SWITCH Expression LCURL ExprCaseClauseRep RCURL .

    SEMICOLON       reduce using rule 143 (ExprSwitchStmt -> SWITCH Expression LCURL ExprCaseClauseRep RCURL .)


state 276

    (146) ExprCaseClause -> ExprSwitchCase COLON . StatementList
    (53) StatementList -> . StSemiColonRep
    (54) StSemiColonRep -> . Statement SEMICOLON StSemiColonRep
    (55) StSemiColonRep -> . empty
    (110) Statement -> . Declaration
    (111) Statement -> . SimpleStmt
    (112) Statement -> . ReturnStmt
    (113) Statement -> . BreakStmt
    (114) Statement -> . ContinueStmt
    (115) Statement -> . Block
    (116) Statement -> . IfStmt
    (117) Statement -> . SwitchStmt
    (118) Statement -> . ForStmt
    (2) empty -> .
    (14) Declaration -> . ConstDecl
    (15) Declaration -> . VarDecl
    (119) SimpleStmt -> . empty SEMICOLON
    (120) SimpleStmt -> . ExpressionStmt SEMICOLON
    (121) SimpleStmt -> . IncDecStmt SEMICOLON
    (122) SimpleStmt -> . Assignment SEMICOLON
    (157) ReturnStmt -> . RETURN ExpressionListPureOpt
    (160) BreakStmt -> . BREAK
    (161) ContinueStmt -> . CONTINUE
    (52) Block -> . LCURL CreateNewScope StatementList DelScope RCURL
    (138) IfStmt -> . IF Expression Block ElseOpt
    (142) SwitchStmt -> . CreateNewScope ExprSwitchStmt DelScope
    (152) ForStmt -> . CreateNewScope FOR ForClause Block DelScope
    (16) ConstDecl -> . CONST ConstSpec
    (20) VarDecl -> . VAR IdentifierList Type ASSIGN ExpressionList
    (21) VarDecl -> . VAR IdentifierList Type
    (22) VarDecl -> . VAR IdentifierList ASSIGN ExpressionList
    (123) ExpressionStmt -> . Expression
    (124) IncDecStmt -> . IDENTIFIER INCR
    (125) IncDecStmt -> . IDENTIFIER DECR
    (126) Assignment -> . ExpressionList AssignOp ExpressionList
    (50) CreateNewScope -> . empty
    (84) Expression -> . UnaryExpr
    (85) Expression -> . Expression LOGICAL_OR Expression
    (86) Expression -> . Expression LOGICAL_AND Expression
    (87) Expression -> . Expression EQUALS Expression
    (88) Expression -> . Expression NOT_ASSIGN Expression
    (89) Expression -> . Expression LESSER Expression
    (90) Expression -> . Expression GREATER Expression
    (91) Expression -> . Expression LESS_EQUALS Expression
    (92) Expression -> . Expression MORE_EQUALS Expression
    (93) Expression -> . Expression OR Expression
    (94) Expression -> . Expression XOR Expression
    (95) Expression -> . Expression DIVIDE Expression
    (96) Expression -> . Expression MOD Expression
    (97) Expression -> . Expression LSHIFT Expression
    (98) Expression -> . Expression RSHIFT Expression
    (99) Expression -> . Expression PLUS Expression
    (100) Expression -> . Expression MINUS Expression
    (101) Expression -> . Expression STAR Expression
    (102) Expression -> . Expression AND Expression
    (59) ExpressionList -> . Expression CommaExpRep
    (103) UnaryExpr -> . PrimaryExpr
    (104) UnaryExpr -> . UnaryOp UnaryExpr
    (105) UnaryExpr -> . NOT UnaryExpr
    (76) PrimaryExpr -> . Operand
    (77) PrimaryExpr -> . PrimaryExpr Selector
    (78) PrimaryExpr -> . PrimaryExpr LSQUARE Expression RSQUARE
    (79) PrimaryExpr -> . PrimaryExpr Arguments
    (106) UnaryOp -> . PLUS
    (107) UnaryOp -> . MINUS
    (108) UnaryOp -> . STAR
    (109) UnaryOp -> . AND
    (67) Operand -> . Literal
    (68) Operand -> . OperandName
    (69) Operand -> . LPAREN Expression RPAREN
    (70) Literal -> . BasicLit
    (75) OperandName -> . IDENTIFIER
    (71) BasicLit -> . Int INTEGER
    (72) BasicLit -> . Str STRING
    (73) Int -> . empty
    (74) Str -> . empty

    SEMICOLON       reduce using rule 2 (empty -> .)
    CASE            reduce using rule 2 (empty -> .)
    DEFAULT         reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    SWITCH          reduce using rule 2 (empty -> .)
    INTEGER         reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    RETURN          shift and go to state 189
    BREAK           shift and go to state 210
    CONTINUE        shift and go to state 211
    LCURL           shift and go to state 139
    IF              shift and go to state 208
    CONST           shift and go to state 15
    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 201
    NOT             shift and go to state 74
    PLUS            shift and go to state 71
    MINUS           shift and go to state 67
    STAR            shift and go to state 66
    AND             shift and go to state 79
    LPAREN          shift and go to state 77

    UnaryOp                        shift and go to state 64
    ContinueStmt                   shift and go to state 191
    ExpressionStmt                 shift and go to state 193
    ForStmt                        shift and go to state 194
    Statement                      shift and go to state 195
    Operand                        shift and go to state 76
    CreateNewScope                 shift and go to state 196
    IfStmt                         shift and go to state 197
    OperandName                    shift and go to state 68
    Assignment                     shift and go to state 198
    IncDecStmt                     shift and go to state 199
    Declaration                    shift and go to state 200
    empty                          shift and go to state 202
    StSemiColonRep                 shift and go to state 203
    UnaryExpr                      shift and go to state 73
    StatementList                  shift and go to state 278
    ExpressionList                 shift and go to state 205
    SimpleStmt                     shift and go to state 192
    Str                            shift and go to state 69
    Expression                     shift and go to state 206
    Block                          shift and go to state 207
    Int                            shift and go to state 81
    BreakStmt                      shift and go to state 209
    SwitchStmt                     shift and go to state 190
    Literal                        shift and go to state 65
    VarDecl                        shift and go to state 23
    BasicLit                       shift and go to state 70
    PrimaryExpr                    shift and go to state 82
    ReturnStmt                     shift and go to state 212
    ConstDecl                      shift and go to state 24

state 277

    (144) ExprCaseClauseRep -> ExprCaseClause ExprCaseClauseRep .

    RCURL           reduce using rule 144 (ExprCaseClauseRep -> ExprCaseClause ExprCaseClauseRep .)


state 278

    (146) ExprCaseClause -> ExprSwitchCase COLON StatementList .

    CASE            reduce using rule 146 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 146 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    RCURL           reduce using rule 146 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)

